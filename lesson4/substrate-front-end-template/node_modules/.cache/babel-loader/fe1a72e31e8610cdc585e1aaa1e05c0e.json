{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signingInfo = signingInfo;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _constants = require(\"./constants\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction latestNonce(api, address) {\n  return api.derive.balances.account(address).pipe((0, _operators.map)(({\n    accountNonce\n  }) => accountNonce));\n}\n\nfunction signingHeader(api) {\n  return (0, _rxjs.combineLatest)([api.rpc.chain.getHeader(), api.rpc.chain.getFinalizedHead().pipe((0, _operators.switchMap)(hash => api.rpc.chain.getHeader(hash)))]).pipe((0, _operators.map)(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized\n  current.number.unwrap().sub(finalized.number.unwrap()).gt(_constants.MAX_FINALITY_LAG) ? current : finalized));\n}\n\nfunction signingInfo(api) {\n  // no memo, we want to do this fresh on each run\n  return (address, nonce, era) => (0, _rxjs.combineLatest)([// retrieve nonce if none was specified\n  (0, _util.isUndefined)(nonce) ? latestNonce(api, address) : (0, _rxjs.of)(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval\n  (0, _util.isUndefined)(era) || (0, _util.isNumber)(era) && era > 0 ? signingHeader(api) : (0, _rxjs.of)(null)]).pipe((0, _operators.map)(([nonce, header]) => {\n    var _api$consts$babe, _api$consts$timestamp;\n\n    return {\n      header,\n      mortalLength: _constants.MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || _constants.FALLBACK_PERIOD).add(_constants.MAX_FINALITY_LAG).toNumber(),\n      nonce\n    };\n  }));\n}","map":null,"metadata":{},"sourceType":"script"}