{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"../codec/Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction decodeText(value) {\n  if ((0, _util.isHex)(value)) {\n    return (0, _util.u8aToString)((0, _util.hexToU8a)(value.toString()));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof _Raw.default) {\n      return (0, _util.u8aToString)(value);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(total <= value.length, `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return (0, _util.u8aToString)(value.subarray(offset, total));\n  }\n\n  return value.toString();\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nclass Text extends String {\n  constructor(registry, value = '') {\n    super(decodeText(value));\n    this.registry = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.createType('H256', (0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _util.isString)(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like  with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return (0, _util.u8aToHex)(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = (0, _util.stringToU8a)(super.toString());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Text;\n\nvar _override = (0, _classPrivateFieldLooseKey2.default)(\"override\");","map":null,"metadata":{},"sourceType":"script"}