{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/rpc-provider authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction formatErrorData(data) {\n  if ((0, _util.isUndefined)(data)) {\n    return '';\n  }\n\n  const formatted = (0, _util.isString)(data) ? data.replace('Error(\"', '').replace('\")', '') : JSON.stringify(data); // We need some sort of cut-off here since these can be very large and\n  // very nested, pick a number and trim the result display to it\n\n  return `: ${formatted.substr(0, 100)}`;\n}\n/** @internal */\n\n\nclass RpcCoder {\n  constructor() {\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: 0\n    });\n  }\n\n  decodeResponse(response) {\n    (0, _util.assert)(response, 'Empty response object received');\n    (0, _util.assert)(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');\n    const isSubscription = !(0, _util.isUndefined)(response.params) && !(0, _util.isUndefined)(response.method);\n    (0, _util.assert)((0, _util.isNumber)(response.id) || isSubscription && (0, _util.isNumber)(response.params.subscription), 'Invalid id field in decoded object');\n\n    this._checkError(response.error);\n\n    (0, _util.assert)(!(0, _util.isUndefined)(response.result) || isSubscription, 'No result found in JsonRpc response');\n\n    if (isSubscription) {\n      this._checkError(response.params.error);\n\n      return response.params.result;\n    }\n\n    return response.result;\n  }\n\n  encodeJson(method, params) {\n    return JSON.stringify(this.encodeObject(method, params));\n  }\n\n  encodeObject(method, params) {\n    return {\n      id: ++(0, _classPrivateFieldLooseBase2.default)(this, _id)[_id],\n      jsonrpc: '2.0',\n      method,\n      params\n    };\n  }\n\n  getId() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _id)[_id];\n  }\n\n  _checkError(error) {\n    if (error) {\n      const {\n        code,\n        data,\n        message\n      } = error;\n      throw new Error(`${code}: ${message}${formatErrorData(data)}`);\n    }\n  }\n\n}\n\nexports.default = RpcCoder;\n\nvar _id = (0, _classPrivateFieldLooseKey2.default)(\"id\");","map":null,"metadata":{},"sourceType":"script"}