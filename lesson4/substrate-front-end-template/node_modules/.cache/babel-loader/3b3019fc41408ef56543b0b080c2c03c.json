{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _eventemitter2 = _interopRequireDefault(require(\"eventemitter3\")); // Copyright 2017-2020 @polkadot/api authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nclass Events {\n  constructor() {\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: new _eventemitter2.default()\n    });\n  }\n\n  emit(type, ...args) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);\n  }\n  /**\n   * @description Attach an eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.on('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.on('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  on(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Remove the given eventemitter handler\n   *\n   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to unregister.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const handler = (): void => {\n   *  console.log('Connected !);\n   * };\n   *\n   * // Start listening\n   * api.on('connected', handler);\n   *\n   * // Stop listening\n   * api.off('connected', handler);\n   * ```\n   */\n\n\n  off(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, handler);\n\n    return this;\n  }\n  /**\n   * @description Attach an one-time eventemitter handler to listen to a specific event\n   *\n   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`\n   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.once('connected', (): void => {\n   *   console.log('API has been connected to the endpoint');\n   * });\n   *\n   * api.once('disconnected', (): void => {\n   *   console.log('API has been disconnected from the endpoint');\n   * });\n   * ```\n   */\n\n\n  once(type, handler) {\n    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once(type, handler);\n\n    return this;\n  }\n\n}\n\nexports.default = Events;\n\nvar _eventemitter = (0, _classPrivateFieldLooseKey2.default)(\"eventemitter\");","map":null,"metadata":{},"sourceType":"script"}