{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextElected = nextElected;\nexports.validators = validators;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction nextElected(api) {\n  return (0, _util.memo)(() => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not\n  // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh\n  (0, _operators.switchMap)(({\n    currentEra\n  }) => api.query.staking.erasStakers.keys(currentEra)), (0, _operators.map)(keys => keys.map(key => key.args[1]))) : api.query.staking.currentElected());\n}\n/**\n * @description Retrieve latest list of validators\n */\n\n\nfunction validators(api) {\n  return (0, _util.memo)(() => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works\n  // in all actual real-world deployed chains, it does create some confusion for limited template chains\n  // NOTE: Not doing multi queries here, since we have validators as a single in the derived newHead\n  (0, _rxjs.combineLatest)([api.query.session ? api.query.session.validators() : (0, _rxjs.of)([]), api.query.staking ? api.derive.staking.nextElected() : (0, _rxjs.of)([])]).pipe((0, _operators.map)(([validators, nextElected]) => ({\n    nextElected: nextElected.length ? nextElected : validators,\n    validators\n  }))));\n}","map":null,"metadata":{},"sourceType":"script"}