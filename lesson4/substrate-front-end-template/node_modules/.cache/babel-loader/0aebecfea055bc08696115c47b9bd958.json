{"ast":null,"code":"var _jsxFileName = \"/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/Interactor.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nfunction Main(props) {\n  const {\n    api\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [status, setStatus] = useState(null);\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [pallets, setPallets] = useState([]);\n  const [rpcs, setRpcs] = useState([]);\n  const [queries, setQueries] = useState([]);\n  const [extrinsics, setExtrinsics] = useState([]);\n  const [rpcCallables, setRpcCallables] = useState([]);\n  const [constants, setConstants] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n  const [formState, setFormState] = useState(initFormState);\n  const {\n    palletRpc,\n    callable,\n    inputParams\n  } = formState;\n\n  const updatePalletsRPCs = () => {\n    const pallets = Object.keys(api.tx).sort().map(pallet => ({\n      key: pallet,\n      value: pallet,\n      text: pallet\n    }));\n    setPallets(pallets);\n    const rpcs = Object.keys(api.rpc).sort().map(rpc => ({\n      key: rpc,\n      value: rpc,\n      text: rpc\n    }));\n    setRpcs(rpcs);\n  };\n\n  const showPalletsRPCs = () => ['QUERY', 'EXTRINSIC', 'CONSTANT'].indexOf(interxType) >= 0 ? pallets : rpcs;\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') {\n      return;\n    } // For pallet queries\n\n\n    let queries = [];\n\n    if (api.query[palletRpc]) {\n      queries = Object.keys(api.query[palletRpc]).sort().map(callable => ({\n        key: callable,\n        value: callable,\n        text: callable\n      }));\n    }\n\n    setQueries(queries); // For pallet extrinsics\n\n    let extrinsics = [];\n\n    if (api.tx[palletRpc]) {\n      extrinsics = Object.keys(api.tx[palletRpc]).sort().map(callable => ({\n        key: callable,\n        value: callable,\n        text: callable\n      }));\n    }\n\n    setExtrinsics(extrinsics); // For RPC callables\n\n    let rpcCallables = [];\n\n    if (api.rpc[palletRpc]) {\n      rpcCallables = Object.keys(api.rpc[palletRpc]).sort().map(callable => ({\n        key: callable,\n        value: callable,\n        text: callable\n      }));\n    }\n\n    setRpcCallables(rpcCallables);\n    let constants = [];\n\n    if (api.consts[palletRpc]) {\n      constants = Object.keys(api.consts[palletRpc]).sort().map(constant => ({\n        key: constant,\n        value: constant,\n        text: constant\n      }));\n    }\n\n    setConstants(constants); // Clear param fields\n\n    setParamFields([]);\n  };\n\n  const showCallables = () => {\n    if (interxType === 'QUERY') {\n      return queries;\n    } else if (interxType === 'EXTRINSIC') {\n      return extrinsics;\n    } else if (interxType === 'RPC') {\n      return rpcCallables;\n    }\n\n    return constants;\n  };\n\n  const updateParamFields = () => {\n    if (palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n\n      if (metaType.isPlain) {// Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString()\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString()\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString()\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString()\n        }));\n      }\n    } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n      // NOTE: we don't know how to detect RPC parameters, so only support RPC with no params now.\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletsRPCs, [api]);\n  useEffect(updateCallables, [api, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const {\n        state,\n        value\n      } = data;\n\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const {\n          ind,\n          type\n        } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = {\n          type,\n          value\n        };\n        res = { ...formState,\n          inputParams\n        };\n      } else if (state === 'palletRpc') {\n        res = { ...formState,\n          [state]: value,\n          callable: '',\n          inputParams: []\n        };\n      } else if (state === 'callable') {\n        res = { ...formState,\n          [state]: value,\n          inputParams: []\n        };\n      }\n\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value); // clear the formState\n\n    setFormState(initFormState);\n  };\n\n  return React.createElement(Grid.Column, {\n    width: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Pallet Interactor\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    style: {\n      overflowX: 'auto'\n    },\n    inline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Interaction Type\"), React.createElement(Form.Radio, {\n    label: \"Extrinsic\",\n    name: \"interxType\",\n    value: \"EXTRINSIC\",\n    checked: interxType === 'EXTRINSIC',\n    onChange: onInterxTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(Form.Radio, {\n    label: \"Query\",\n    name: \"interxType\",\n    value: \"QUERY\",\n    checked: interxType === 'QUERY',\n    onChange: onInterxTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(Form.Radio, {\n    label: \"RPC\",\n    name: \"interxType\",\n    value: \"RPC\",\n    checked: interxType === 'RPC',\n    onChange: onInterxTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), React.createElement(Form.Radio, {\n    label: \"Constant\",\n    name: \"interxType\",\n    value: \"CONSTANT\",\n    checked: interxType === 'CONSTANT',\n    onChange: onInterxTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    placeholder: \"Pallets / RPC\",\n    fluid: true,\n    label: \"Pallet / RPC\",\n    onChange: onPalletCallableParamChange,\n    search: true,\n    selection: true,\n    state: \"palletRpc\",\n    value: palletRpc,\n    options: showPalletsRPCs(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    placeholder: \"Callables\",\n    fluid: true,\n    label: \"Callable\",\n    onChange: onPalletCallableParamChange,\n    search: true,\n    selection: true,\n    state: \"callable\",\n    value: callable,\n    options: showCallables(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })), paramFields.map((paramField, ind) => React.createElement(Form.Field, {\n    key: `${paramField.name}-${paramField.type}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(Input, {\n    placeholder: paramField.type,\n    fluid: true,\n    type: \"text\",\n    label: paramField.name,\n    state: {\n      ind,\n      type: paramField.type\n    },\n    value: inputParams[ind] ? inputParams[ind].value : '',\n    onChange: onPalletCallableParamChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }))), React.createElement(Form.Field, {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(InteractorSubmit, {\n    accountPair: accountPair,\n    setStatus: setStatus,\n    attrs: {\n      interxType,\n      palletRpc,\n      callable,\n      inputParams,\n      paramFields\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      overflowWrap: 'break-word'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, status)));\n}\n\nfunction InteractorSubmit(props) {\n  const {\n    attrs: {\n      interxType\n    }\n  } = props;\n\n  if (interxType === 'QUERY') {\n    return React.createElement(TxButton, Object.assign({\n      label: \"Query\",\n      type: \"QUERY\",\n      color: \"blue\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }));\n  } else if (interxType === 'EXTRINSIC') {\n    return React.createElement(TxGroupButton, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }));\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return React.createElement(TxButton, Object.assign({\n      label: \"Submit\",\n      type: interxType,\n      color: \"blue\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }));\n  }\n}\n\nexport default function Interactor(props) {\n  const {\n    api\n  } = useSubstrate();\n  return api.tx ? React.createElement(Main, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  })) : null;\n}","map":{"version":3,"sources":["/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/Interactor.js"],"names":["React","useEffect","useState","Grid","Form","Dropdown","Input","useSubstrate","TxButton","TxGroupButton","Main","props","api","accountPair","status","setStatus","interxType","setInterxType","pallets","setPallets","rpcs","setRpcs","queries","setQueries","extrinsics","setExtrinsics","rpcCallables","setRpcCallables","constants","setConstants","paramFields","setParamFields","initFormState","palletRpc","callable","inputParams","formState","setFormState","updatePalletsRPCs","Object","keys","tx","sort","map","pallet","key","value","text","rpc","showPalletsRPCs","indexOf","updateCallables","query","consts","constant","showCallables","updateParamFields","metaType","meta","type","isPlain","isMap","name","asMap","toString","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","length","arg","onPalletCallableParamChange","_","data","res","state","ind","onInterxTypeChange","ev","overflowX","paramField","textAlign","overflowWrap","InteractorSubmit","attrs","Interactor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [pallets, setPallets] = useState([]);\n  const [rpcs, setRpcs] = useState([]);\n\n  const [queries, setQueries] = useState([]);\n  const [extrinsics, setExtrinsics] = useState([]);\n  const [rpcCallables, setRpcCallables] = useState([]);\n  const [constants, setConstants] = useState([]);\n\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const updatePalletsRPCs = () => {\n    const pallets = Object.keys(api.tx).sort()\n      .map(pallet => ({ key: pallet, value: pallet, text: pallet }));\n    setPallets(pallets);\n\n    const rpcs = Object.keys(api.rpc).sort()\n      .map(rpc => ({ key: rpc, value: rpc, text: rpc }));\n    setRpcs(rpcs);\n  };\n\n  const showPalletsRPCs = () =>\n    (['QUERY', 'EXTRINSIC', 'CONSTANT'].indexOf(interxType) >= 0)\n      ? pallets\n      : rpcs;\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n\n    // For pallet queries\n    let queries = [];\n    if (api.query[palletRpc]) {\n      queries = Object.keys(api.query[palletRpc]).sort()\n        .map(callable => ({ key: callable, value: callable, text: callable }));\n    }\n    setQueries(queries);\n\n    // For pallet extrinsics\n    let extrinsics = [];\n    if (api.tx[palletRpc]) {\n      extrinsics = Object.keys(api.tx[palletRpc]).sort()\n        .map(callable => ({ key: callable, value: callable, text: callable }));\n    }\n    setExtrinsics(extrinsics);\n\n    // For RPC callables\n    let rpcCallables = [];\n    if (api.rpc[palletRpc]) {\n      rpcCallables = Object.keys(api.rpc[palletRpc]).sort()\n        .map(callable => ({ key: callable, value: callable, text: callable }));\n    }\n    setRpcCallables(rpcCallables);\n\n    let constants = [];\n    if (api.consts[palletRpc]) {\n      constants = Object.keys(api.consts[palletRpc]).sort()\n        .map(constant => ({ key: constant, value: constant, text: constant }));\n    }\n    setConstants(constants);\n\n    // Clear param fields\n    setParamFields([]);\n  };\n\n  const showCallables = () => {\n    if (interxType === 'QUERY') {\n      return queries;\n    } else if (interxType === 'EXTRINSIC') {\n      return extrinsics;\n    } else if (interxType === 'RPC') {\n      return rpcCallables;\n    }\n    return constants;\n  };\n\n  const updateParamFields = () => {\n    if (palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString()\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString()\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString()\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString()\n        }));\n      }\n    } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n      // NOTE: we don't know how to detect RPC parameters, so only support RPC with no params now.\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletsRPCs, [api]);\n  useEffect(updateCallables, [api, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, type } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={showPalletsRPCs()}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={showCallables()}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, type: paramField.type }}\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\n              onChange={onPalletCallableParamChange}\n            />\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    return <TxButton\n      label = 'Query'\n      type = 'QUERY'\n      color = 'blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label = 'Submit'\n      type = {interxType}\n      color = 'blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function Interactor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n"]},"metadata":{},"sourceType":"module"}