{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\n\nvar _default = {\n  rpc: {},\n  types: {\n    AttestedCandidate: {\n      candidate: 'CandidateReceipt',\n      validityVotes: 'Vec<ValidityAttestation>',\n      validatorIndices: 'BitVec'\n    },\n    AuctionIndex: 'u32',\n    Bidder: {\n      _enum: {\n        New: 'NewBidder',\n        Existing: 'ParaId'\n      }\n    },\n    CandidateReceipt: {\n      parachainIndex: 'ParaId',\n      collator: 'CollatorId',\n      signature: 'CollatorSignature',\n      headData: 'HeadData',\n      egressQueueRoots: 'Vec<(ParaId, Hash)>',\n      fees: 'Balance',\n      blockDataHash: 'Hash',\n      upwardMessages: 'Vec<UpwardMessage>',\n      erasureRoot: 'Hash'\n    },\n    CollatorId: 'H256',\n    CollatorSignature: 'Signature',\n    DoubleVoteReport: {\n      identity: 'ValidatorId',\n      first: 'DoubleVoteReportStatement',\n      second: 'DoubleVoteReportStatement',\n      proof: 'DoubleVoteReportProof',\n      signingContext: 'SigningContext'\n    },\n    // session::historical::Proof\n    DoubleVoteReportProof: {\n      session: 'SessionIndex',\n      trieNodes: 'Vec<Bytes>'\n    },\n    DoubleVoteReportStatement: '(Statement, ValidatorSignature)',\n    EgressQueueRoot: '(ParaId, Hash)',\n    HeadData: 'Bytes',\n    IncomingParachainDeploy: {\n      code: 'Bytes',\n      initialHeadData: 'Bytes'\n    },\n    IncomingParachainFixed: {\n      codeHash: 'Hash',\n      initialHeadData: 'Bytes'\n    },\n    IncomingParachain: {\n      _enum: {\n        Unset: 'NewBidder',\n        Fixed: 'IncomingParachainFixed',\n        Deploy: 'IncomingParachainDeploy'\n      }\n    },\n    LeasePeriod: 'BlockNumber',\n    LeasePeriodOf: 'LeasePeriod',\n    NewBidder: {\n      who: 'AccountId',\n      sub: 'SubId'\n    },\n    ParaId: 'u32',\n    ParaIdOf: 'ParaId',\n    ParaInfo: {\n      scheduling: 'ParaScheduling'\n    },\n    ParaPastCodeMeta: {\n      upgradeTimes: 'Vec<BlockNumber>',\n      lastPruned: 'Option<BlockNumber>'\n    },\n    ParachainDispatchOrigin: {\n      _enum: ['Signed', 'Parachain']\n    },\n    ParaScheduling: {\n      _enum: ['Always', 'Dynamic']\n    },\n    Retriable: {\n      _enum: {\n        Never: 'Null',\n        WithRetries: 'u32'\n      }\n    },\n    SigningContext: {\n      sessionIndex: 'SessionIndex',\n      parentHash: 'Hash'\n    },\n    SlotRange: {\n      _enum: ['ZeroZero', // 0\n      'ZeroOne', // 1,\n      'ZeroTwo', // 2,\n      'ZeroThree', // 3,\n      'OneOne', // 4,\n      'OneTwo', // 5,\n      'OneThree', // 6,\n      'TwoTwo', // 7,\n      'TwoThree', // 8,\n      'ThreeThree' // 9\n      ]\n    },\n    Statement: {\n      _enum: {\n        // This Null is not in the original, however indexes start at 1\n        Never: 'Null',\n        Candidate: 'Hash',\n        Valid: 'Hash',\n        Invalid: 'Hash'\n      }\n    },\n    SubId: 'u32',\n    UpwardMessage: {\n      origin: 'ParachainDispatchOrigin',\n      data: 'Bytes'\n    },\n    ValidationCode: 'Bytes',\n    ValidityAttestation: {\n      _enum: {\n        // This Null is not in the original, however indexes start at 1\n        Never: 'Null',\n        Implicit: 'ValidatorSignature',\n        // 1\n        Explicit: 'ValidatorSignature' // 2\n\n      }\n    },\n    ValidatorSignature: 'Signature',\n    WinningDataEntry: '(AccountId, ParaIdOf, BalanceOf)',\n    WinningData: '[WinningDataEntry; 10]'\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}