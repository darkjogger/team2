{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"./Enum\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\n\nclass Result extends _Enum.default {\n  constructor(registry, Ok, Error, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Error\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Error, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Error value (if isError)\n   */\n\n\n  get asError() {\n    (0, _util.assert)(this.isError, 'Cannot extract Error value from Ok result, check isError first');\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    (0, _util.assert)(this.isOk, 'Cannot extract Ok value from Error result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this._raw.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Error value\n   */\n\n\n  get isError() {\n    return !this.isOk;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Error}>`;\n  }\n\n}\n\nexports.default = Result;","map":null,"metadata":{},"sourceType":"script"}