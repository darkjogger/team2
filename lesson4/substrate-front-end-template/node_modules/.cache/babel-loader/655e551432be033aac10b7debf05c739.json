{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.EventData = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\"));\n\nvar _Tuple = _interopRequireDefault(require(\"../codec/Tuple\"));\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name EventData\n * @description\n * Wrapper for the actual data that forms part of an [[Event]]\n */\n\n\nclass EventData extends _Tuple.default {\n  constructor(registry, Types, value, typeDef, meta, section, method) {\n    super(registry, Types, value);\n    Object.defineProperty(this, _meta, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _method, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _section, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _typeDef, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta] = meta;\n    (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method] = method;\n    (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section] = section;\n    (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef] = typeDef;\n  }\n  /**\n   * @description The wrapped [[EventMetadata]]\n   */\n\n\n  get meta() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta];\n  }\n  /**\n   * @description The method as a string\n   */\n\n\n  get method() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method];\n  }\n  /**\n   * @description The section as a string\n   */\n\n\n  get section() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section];\n  }\n  /**\n   * @description The [[TypeDef]] for this event\n   */\n\n\n  get typeDef() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef];\n  }\n\n}\n/**\n * @name Event\n * @description\n * A representation of a system event. These are generated via the [[Metadata]] interfaces and\n * specific to a specific Substrate runtime\n */\n\n\nexports.EventData = EventData;\n\nvar _meta = (0, _classPrivateFieldLooseKey2.default)(\"meta\");\n\nvar _method = (0, _classPrivateFieldLooseKey2.default)(\"method\");\n\nvar _section = (0, _classPrivateFieldLooseKey2.default)(\"section\");\n\nvar _typeDef = (0, _classPrivateFieldLooseKey2.default)(\"typeDef\");\n\nclass Event extends _Struct.default {\n  // Currently we _only_ decode from Uint8Array, since we expect it to\n  // be used via EventRecord\n  constructor(registry, _value) {\n    const {\n      DataType,\n      value\n    } = Event.decodeEvent(registry, _value);\n    super(registry, {\n      index: 'EventId',\n      // eslint-disable-next-line sort-keys\n      data: DataType\n    }, value);\n  }\n  /** @internal */\n\n\n  static decodeEvent(registry, value = new Uint8Array()) {\n    if (!value.length) {\n      return {\n        DataType: _Null.default\n      };\n    }\n\n    const index = value.subarray(0, 2);\n    return {\n      DataType: registry.findMetaEvent(index),\n      value: {\n        data: value.subarray(2),\n        index\n      }\n    };\n  }\n  /**\n   * @description The wrapped [[EventData]]\n   */\n\n\n  get data() {\n    return this.get('data');\n  }\n  /**\n   * @description The [[EventId]], identifying the raw event\n   */\n\n\n  get index() {\n    return this.get('index');\n  }\n  /**\n   * @description The [[EventMetadata]] with the documentation\n   */\n\n\n  get meta() {\n    return this.data.meta;\n  }\n  /**\n   * @description The method string identifying the event\n   */\n\n\n  get method() {\n    return this.data.method;\n  }\n  /**\n   * @description The section string identifying the event\n   */\n\n\n  get section() {\n    return this.data.section;\n  }\n  /**\n   * @description The [[TypeDef]] for the event\n   */\n\n\n  get typeDef() {\n    return this.data.typeDef;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toHuman(isExpanded) {\n    // FIXME May this human-friendly\n    return this.toJSON();\n  }\n\n}\n\nexports.default = Event;","map":null,"metadata":{},"sourceType":"script"}