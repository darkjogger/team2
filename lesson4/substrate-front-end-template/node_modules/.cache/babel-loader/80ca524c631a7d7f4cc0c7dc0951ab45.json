{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerExposure = _stakerExposure;\nexports.stakerExposure = stakerExposure;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction _stakerExposure(api) {\n  return (0, _util.memo)((accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _operators.map)(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\n\nfunction stakerExposure(api) {\n  return (0, _util.memo)((accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}","map":null,"metadata":{},"sourceType":"script"}