{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.votes = votes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction retrieveStakeOf(api) {\n  const elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.stakeOf.creator.meta.type.asMap.linked.isTrue ? elections.stakeOf().pipe((0, _operators.map)(([voters, stake]) => voters.map((voter, index) => [voter, stake[index]]))) : elections.stakeOf.entries().pipe((0, _operators.map)(entries => entries.map(([key, stake]) => [key.args[0], stake])));\n}\n\nfunction retrieveVoteOf(api) {\n  const elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.votesOf.creator.meta.type.asMap.linked.isTrue ? elections.votesOf().pipe((0, _operators.map)(([voters, votes]) => voters.map((voter, index) => [voter, votes[index]]))) : elections.votesOf.entries().pipe((0, _operators.map)(entries => entries.map(([key, votes]) => [key.args[0], votes])));\n}\n\nfunction retrievePrev(api) {\n  return (0, _rxjs.combineLatest)([retrieveStakeOf(api), retrieveVoteOf(api)]).pipe((0, _operators.map)(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(api) {\n  const elections = api.query.electionsPhragmen || api.query.elections;\n  return elections.voting.entries().pipe((0, _operators.map)(entries => entries.map(([key, [stake, votes]]) => [key.args[0], {\n    stake,\n    votes\n  }])));\n}\n\nfunction votes(api) {\n  return (0, _util.memo)(() => (api.query.electionsPhragmen || api.query.elections).stakeOf ? retrievePrev(api) : retrieveCurrent(api));\n}","map":null,"metadata":{},"sourceType":"script"}