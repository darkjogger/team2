{"ast":null,"code":"var _jsxFileName = \"/Users/binggao/Documents/GitHub/team2/lesson4/substrate-front-end-template/src/substrate-lib/SubstrateContext.js\";\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport config from '../config';\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\nconst INIT_STATE = {\n  socket: connectedSocket,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state,\n        socket,\n        api: null,\n        apiState: null\n      };\n\n    case 'CONNECT':\n      return { ...state,\n        api: action.payload,\n        apiState: 'CONNECTING'\n      };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state,\n        apiState: 'READY'\n      };\n\n    case 'CONNECT_ERROR':\n      return { ...state,\n        apiState: 'ERROR'\n      };\n\n    case 'SET_KEYRING':\n      return { ...state,\n        keyring: action.payload,\n        keyringState: 'READY'\n      };\n\n    case 'KEYRING_ERROR':\n      return { ...state,\n        keyring: null,\n        keyringState: 'ERROR'\n      };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = props => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE\n  };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = typeof props[key] === 'undefined' ? initState[key] : props[key];\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n  return React.createElement(SubstrateContext.Provider, {\n    value: [state, dispatch],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.children);\n}; // prop typechecking\n\n\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\nexport { SubstrateContext, SubstrateContextProvider };","map":{"version":3,"sources":["/Users/binggao/Documents/GitHub/team2/lesson4/substrate-front-end-template/src/substrate-lib/SubstrateContext.js"],"names":["React","useReducer","PropTypes","queryString","config","parsedQuery","parse","window","location","search","connectedSocket","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","types","CUSTOM_TYPES","keyring","keyringState","api","apiState","reducer","state","action","type","payload","Error","SubstrateContext","createContext","SubstrateContextProvider","props","initState","neededPropNames","forEach","key","dispatch","children","propTypes","string","object"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state, socket, api: null, apiState: null };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <SubstrateContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SubstrateContext.Provider>\n  );\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nexport { SubstrateContext, SubstrateContextProvider };\n"]},"metadata":{},"sourceType":"module"}