{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractStorageArgs = extractStorageArgs;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2019 @polkadot/api authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction sig({\n  method,\n  section\n}, ...args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  (0, _util.assert)(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key,\n    linked\n  } = creator.meta.type.asMap;\n  linked.isTrue ? (0, _util.assert)(args.length <= 1, `${sig(creator, key)} is a linked map, requiring either 0 arguments (retrieving all) or 1 argument, ${args.length} found`) : (0, _util.assert)(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nfunction extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !(0, _util.isUndefined)(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  (0, _util.assert)(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}","map":null,"metadata":{},"sourceType":"script"}