{"ast":null,"code":"var _jsxFileName = \"/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/TemplateModule.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main(props) {\n  const {\n    api\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props; // The transaction submission status\n\n  const [status, setStatus] = useState(''); // The currently stored value\n\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n  return React.createElement(Grid.Column, {\n    width: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Template Module\"), React.createElement(Card, {\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Card.Content, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    label: \"Current Value\",\n    value: currentValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"New Value\",\n    state: \"newValue\",\n    type: \"number\",\n    onChange: (_, {\n      value\n    }) => setFormValue(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(Form.Field, {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(TxButton, {\n    accountPair: accountPair,\n    label: \"Store Something\",\n    type: \"SIGNED-TX\",\n    setStatus: setStatus,\n    attrs: {\n      palletRpc: 'templateModule',\n      callable: 'doSomething',\n      inputParams: [formValue],\n      paramFields: [true]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      overflowWrap: 'break-word'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, status)));\n}\n\nexport default function TemplateModule(props) {\n  const {\n    api\n  } = useSubstrate();\n  return api.query.templateModule && api.query.templateModule.something ? React.createElement(Main, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })) : null;\n}","map":{"version":3,"sources":["/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/TemplateModule.js"],"names":["React","useEffect","useState","Form","Input","Grid","Card","Statistic","useSubstrate","TxButton","Main","props","api","accountPair","status","setStatus","currentValue","setCurrentValue","formValue","setFormValue","unsubscribe","query","templateModule","something","newValue","isNone","unwrap","toNumber","then","unsub","catch","console","error","_","value","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap","TemplateModule"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState('');\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Template Module</h1>\n      <Card centered>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            label='New Value'\n            state='newValue'\n            type='number'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'doSomething',\n              inputParams: [formValue],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} /> : null);\n}\n"]},"metadata":{},"sourceType":"module"}