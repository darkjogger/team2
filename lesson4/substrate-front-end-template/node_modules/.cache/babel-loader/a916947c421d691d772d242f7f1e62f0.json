{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Sign;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _blake = require(\"../blake2\");\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, {\n  secretKey\n}) {\n  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');\n  const messageHash = (0, _blake.blake2AsU8a)((0, _util.u8aToU8a)(message), 256);\n  const key = ec.keyFromPrivate(secretKey);\n  const ecsig = key.sign(messageHash);\n  const rParam = new Uint8Array(ecsig.r.toArray());\n  const sParam = new Uint8Array(ecsig.s.toArray());\n  const recoveryParam = Uint8Array.of(ecsig.recoveryParam || 0);\n  return (0, _util.u8aConcat)(rParam, sParam, recoveryParam);\n}","map":null,"metadata":{},"sourceType":"script"}