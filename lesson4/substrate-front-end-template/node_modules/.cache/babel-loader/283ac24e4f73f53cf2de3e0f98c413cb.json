{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction sortAccounts([, balanceA], [, balanceB]) {\n  return balanceB.cmp(balanceA);\n}\n\nfunction queryElections(api) {\n  const section = api.query.electionsPhragmen ? 'electionsPhragmen' : 'elections';\n  return api.queryMulti([api.query.council.members, api.query[section].candidates, api.query[section].members, api.query[section].runnersUp]).pipe((0, _operators.map)(([councilMembers, candidates, members, runnersUp]) => ({\n    candidacyBond: api.consts[section].candidacyBond,\n    candidateCount: api.registry.createType('u32', candidates.length),\n    candidates,\n    desiredSeats: api.consts[section].desiredMembers,\n    members: members.length ? members.sort(sortAccounts) : councilMembers.map(accountId => [accountId, api.registry.createType('Balance')]),\n    runnersUp: runnersUp.sort(sortAccounts),\n    termDuration: api.consts[section].termDuration,\n    votingBond: api.consts[section].votingBond\n  })));\n}\n/**\n * @name info\n * @returns An object containing the combined results of the storage queries for\n * all relevant election module properties.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.elections.info(({ members, candidates }) => {\n *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);\n * });\n * ```\n */\n\n\nfunction info(api) {\n  return (0, _util.memo)(() => queryElections(api));\n}","map":null,"metadata":{},"sourceType":"script"}