{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _constants = require(\"../constants\");\n\nvar _ExtrinsicSignature = _interopRequireDefault(require(\"../v2/ExtrinsicSignature\"));\n\nvar _ExtrinsicPayload = _interopRequireDefault(require(\"./ExtrinsicPayload\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name GenericExtrinsicSignatureV3\n * @description\n * A container for the [[Signature]] associated with a specific [[Extrinsic]]\n */\n\n\nclass ExtrinsicSignatureV3 extends _ExtrinsicSignature.default {\n  /**\n   * @description Adds a raw signature\n   */\n  addSignature(signer, signature, payload) {\n    return this._injectSignature(this.registry.createType('Address', signer), this.registry.createType('Signature', signature), new _ExtrinsicPayload.default(this.registry, payload));\n  }\n  /**\n   * @description Creates a payload from the supplied options\n   */\n\n\n  createPayload(method, {\n    blockHash,\n    era,\n    genesisHash,\n    nonce,\n    runtimeVersion: {\n      specVersion\n    },\n    tip\n  }) {\n    return new _ExtrinsicPayload.default(this.registry, {\n      blockHash,\n      era: era || _constants.IMMORTAL_ERA,\n      genesisHash,\n      method: method.toHex(),\n      nonce,\n      specVersion,\n      tip: tip || 0,\n      transactionVersion: 0\n    });\n  }\n  /**\n   * @description Generate a payload and applies the signature from a keypair\n   */\n\n\n  sign(method, account, options) {\n    const address = account.publicKey.length > 32 ? (0, _utilCrypto.blake2AsU8a)(account.publicKey, 256) : account.publicKey;\n    const signer = this.registry.createType('Address', address);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('Signature', payload.sign(account));\n    return this._injectSignature(signer, signature, payload);\n  }\n  /**\n   * @description Generate a payload and applies a fake signature\n   */\n\n\n  signFake(method, address, options) {\n    const signer = this.registry.createType('Address', address);\n    const payload = this.createPayload(method, options);\n    const signature = this.registry.createType('Signature', new Uint8Array(64).fill(0x42));\n    return this._injectSignature(signer, signature, payload);\n  }\n\n}\n\nexports.default = ExtrinsicSignatureV3;","map":null,"metadata":{},"sourceType":"script"}