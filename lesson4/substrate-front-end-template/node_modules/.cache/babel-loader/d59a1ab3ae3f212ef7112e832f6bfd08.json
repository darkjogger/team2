{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _compareMap = _interopRequireDefault(require(\"./utils/compareMap\"));\n\nvar _decodeU8a = _interopRequireDefault(require(\"./utils/decodeU8a\"));\n\nvar _typeToConstructor = _interopRequireDefault(require(\"./utils/typeToConstructor\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {\n  const output = new Map();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(KeyClass, ValClass);\n  }\n\n  const values = (0, _decodeU8a.default)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i += 2) {\n    output.set(values[i], values[i + 1]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeMapFromMap(registry, KeyClass, ValClass, value) {\n  const output = new Map();\n  value.forEach((val, key) => {\n    try {\n      output.set(key instanceof KeyClass ? key : new KeyClass(registry, key), val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode Map key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param KeyClass - Type of the map key\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Map<any, any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonMap\n * @internal\n */\n\n\nfunction decodeMap(registry, keyType, valType, value) {\n  const KeyClass = (0, _typeToConstructor.default)(registry, keyType);\n  const ValClass = (0, _typeToConstructor.default)(registry, valType);\n\n  if (!value) {\n    return new Map();\n  } else if ((0, _util.isHex)(value)) {\n    return decodeMap(registry, KeyClass, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (value instanceof Map) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, value);\n  } else if ((0, _util.isObject)(value)) {\n    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));\n  }\n\n  throw new Error('Map: cannot decode type');\n}\n\nclass CodecMap extends Map {\n  constructor(registry, type, keyType, valType, rawValue) {\n    super(decodeMap(registry, keyType, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _KeyClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass] = (0, _typeToConstructor.default)(registry, keyType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _typeToConstructor.default)(registry, valType);\n    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = type;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach((v, k) => {\n      len += v.encodedLength + k.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, (0, _utilCrypto.blake2AsU8a)(this.toU8a(), 256));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _compareMap.default)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toHuman(isExtended);\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = {};\n    this.forEach((v, k) => {\n      json[k.toString()] = v.toJSON();\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `${(0, _classPrivateFieldLooseBase2.default)(this, _type)[_type]}<${new ((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach((v, k) => {\n      encoded.push(k.toU8a(isBare), v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = CodecMap;\n\nvar _KeyClass = (0, _classPrivateFieldLooseKey2.default)(\"KeyClass\");\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nvar _type = (0, _classPrivateFieldLooseKey2.default)(\"type\");","map":null,"metadata":{},"sourceType":"script"}