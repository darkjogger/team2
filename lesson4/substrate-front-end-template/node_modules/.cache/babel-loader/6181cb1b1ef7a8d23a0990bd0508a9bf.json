{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toBn = _interopRequireDefault(require(\"../bn/toBn\"));\n\nvar _boolean = _interopRequireDefault(require(\"../is/boolean\"));\n\nvar _undefined = _interopRequireDefault(require(\"../is/undefined\"));\n\nvar _formatDecimal = _interopRequireDefault(require(\"./formatDecimal\"));\n\nvar _si = require(\"./si\"); // Copyright 2017-2020 @polkadot/util authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = _si.SI[_si.SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation\n\nfunction _formatBalance(input, options = true, optDecimals = defaultDecimals) {\n  let text = (0, _toBn.default)(input).toString();\n\n  if (text.length === 0 || text === '0') {\n    return '0';\n  } // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n\n\n  const isNegative = text[0].startsWith('-');\n\n  if (isNegative) {\n    text = text.substr(1);\n  } // extract options - the boolean case is for backwards-compat\n\n\n  const {\n    decimals = optDecimals,\n    forceUnit = undefined,\n    withSi = true,\n    withSiFull = false,\n    withUnit = true\n  } = (0, _boolean.default)(options) ? {\n    withSi: options\n  } : options; // NOTE We start at midpoint (8) minus 1 - this means that values display as\n  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we us ceil\n  // so there are at most 3 decimal before the decimal seperator\n\n  const si = (0, _si.calcSi)(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const prefix = text.substr(0, mid);\n  const padding = mid < 0 ? 0 - mid : 0;\n  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}000`.substr(0, 3);\n  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${(0, _boolean.default)(withUnit) ? si.text : withUnit}` : '' : `${withSiFull ? ` ${si.text}` : si.value}${withUnit ? ` ${(0, _boolean.default)(withUnit) ? _si.SI[_si.SI_MID].text : withUnit}` : ''}` : '';\n  return `${isNegative ? '-' : ''}${(0, _formatDecimal.default)(prefix || '0')}.${postfix}${units}`;\n}\n\nconst formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.calcSi = (text, decimals = defaultDecimals) => (0, _si.calcSi)(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.findSi = _si.findSi; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n}; // get allowable options to display in a dropdown\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n  return _si.SI.filter(({\n    power\n  }) => power < 0 ? decimals + power >= 0 : true);\n}; // Sets the default decimals to use for formatting (ui-wide)\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.setDefaults = ({\n  decimals,\n  unit\n}) => {\n  defaultDecimals = (0, _undefined.default)(decimals) ? defaultDecimals : decimals;\n  defaultUnit = (0, _undefined.default)(unit) ? defaultUnit : unit;\n  _si.SI[_si.SI_MID].text = defaultUnit;\n};\n\nvar _default = formatBalance;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}