{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\");\n\nvar _AbstractArray = _interopRequireDefault(require(\"./AbstractArray\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction decodeTuple(registry, _Types, value) {\n  if ((0, _util.isU8a)(value)) {\n    return (0, _utils.decodeU8a)(registry, value, _Types);\n  } else if ((0, _util.isHex)(value)) {\n    return decodeTuple(registry, _Types, (0, _util.hexToU8a)(value));\n  }\n\n  const Types = Array.isArray(_Types) ? _Types : Object.values(_Types);\n  return Types.map((Type, index) => {\n    try {\n      const entry = value === null || value === void 0 ? void 0 : value[index];\n\n      if (entry instanceof Type) {\n        return entry;\n      }\n\n      return new Type(registry, entry);\n    } catch (error) {\n      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);\n    }\n  });\n}\n/**\n * @name Tuple\n * @description\n * A Tuple defines an anonymous fixed-length array, where each element has its\n * own type. It extends the base JS `Array` object.\n */\n\n\nclass Tuple extends _AbstractArray.default {\n  constructor(registry, Types, value) {\n    const Clazzes = Array.isArray(Types) ? Types.map(type => (0, _utils.typeToConstructor)(registry, type)) : (0, _utils.mapToTypeMap)(registry, Types);\n    super(registry, ...decodeTuple(registry, Clazzes, value));\n    this._Types = void 0;\n    this._Types = Clazzes;\n  }\n\n  static with(Types) {\n    return class extends Tuple {\n      constructor(registry, value) {\n        super(registry, Types, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((length, entry) => {\n      length += entry.encodedLength;\n      return length;\n    }, 0);\n  }\n  /**\n   * @description The types definition of the tuple\n   */\n\n\n  get Types() {\n    return Array.isArray(this._Types) ? this._Types.map(Type => new Type(this.registry).toRawType()) : Object.keys(this._Types);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const types = (Array.isArray(this._Types) ? this._Types : Object.values(this._Types)).map(Type => new Type(this.registry).toRawType());\n    return `(${types.join(',')})`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    // Overwrite the default toString representation of Array.\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(...this.map(entry => entry.toU8a(isBare)));\n  }\n\n}\n\nexports.default = Tuple;","map":null,"metadata":{},"sourceType":"script"}