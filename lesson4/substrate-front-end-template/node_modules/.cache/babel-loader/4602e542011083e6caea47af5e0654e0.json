{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ACCOUNT_ID_PREFIX = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _AccountId = _interopRequireDefault(require(\"./AccountId\"));\n\nvar _AccountIndex = _interopRequireDefault(require(\"./AccountIndex\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);\n/** @internal */\n\nexports.ACCOUNT_ID_PREFIX = ACCOUNT_ID_PREFIX;\n\nfunction decodeString(registry, value) {\n  const decoded = (0, _utilCrypto.decodeAddress)(value);\n  return decoded.length === 32 ? registry.createType('AccountId', decoded) : registry.createType('AccountIndex', (0, _util.u8aToBn)(decoded, true));\n}\n/** @internal */\n\n\nfunction decodeU8a(registry, value) {\n  // This allows us to instantiate an address with a raw publicKey. Do this first before\n  // we checking the first byte, otherwise we may split an already-existent valid address\n  if (value.length === 32) {\n    return registry.createType('AccountId', value);\n  } else if (value[0] === 0xff) {\n    return registry.createType('AccountId', value.subarray(1));\n  }\n\n  const [offset, length] = _AccountIndex.default.readLength(value);\n\n  return registry.createType('AccountIndex', (0, _util.u8aToBn)(value.subarray(offset, offset + length), true));\n}\n/**\n * @name Address\n * @description\n * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.\n * Since we are dealing with underlying publicKeys (or shorter encoded addresses),\n * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address\n * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec\n */\n\n\nclass Address extends _Base.default {\n  constructor(registry, value = new Uint8Array()) {\n    super(registry, Address._decodeAddress(registry, value));\n  }\n  /** @internal */\n\n\n  static _decodeAddress(registry, value) {\n    if (value instanceof _AccountId.default || value instanceof _AccountIndex.default) {\n      return value;\n    } else if (value instanceof Address) {\n      return value._raw;\n    } else if ((0, _util.isBn)(value) || (0, _util.isNumber)(value)) {\n      return registry.createType('AccountIndex', value);\n    } else if (Array.isArray(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value)) {\n      return decodeU8a(registry, (0, _util.u8aToU8a)(value));\n    }\n\n    return decodeString(registry, value);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    const rawLength = this._rawLength;\n    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix\n    rawLength > 1 ? 1 : 0);\n  }\n  /**\n   * @description The length of the raw value, either AccountIndex or AccountId\n   */\n\n\n  get _rawLength() {\n    return this._raw instanceof _AccountIndex.default ? _AccountIndex.default.calcLength(this._raw) : this._raw.encodedLength;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Address';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = this._raw.toU8a().subarray(0, this._rawLength);\n\n    return isBare ? encoded : (0, _util.u8aConcat)(this._raw instanceof _AccountIndex.default ? _AccountIndex.default.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);\n  }\n\n}\n\nexports.default = Address;","map":null,"metadata":{},"sourceType":"script"}