{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // Copyright 2017-2020 @polkadot/api authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\nclass SubmittableResult {\n  constructor({\n    events,\n    status\n  }) {\n    this.events = void 0;\n    this.status = void 0;\n    this.events = events || [];\n    this.status = status;\n  }\n\n  get isCompleted() {\n    return this.isError || this.status.isInBlock || this.status.isFinalized;\n  }\n\n  get isError() {\n    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n  }\n\n  get isFinalized() {\n    return this.status.isFinalized;\n  }\n\n  get isInBlock() {\n    return this.status.isInBlock;\n  }\n\n  get isWarning() {\n    return this.status.isRetracted;\n  }\n  /**\n   * @description Filters EventRecords for the specified method & section (there could be multiple)\n   */\n\n\n  filterRecords(section, method) {\n    return this.events.filter(({\n      event\n    }) => event.section === section && event.method === method);\n  }\n  /**\n   * @description Finds an EventRecord for the specified method & section\n   */\n\n\n  findRecord(section, method) {\n    return this.events.find(({\n      event\n    }) => event.section === section && event.method === method);\n  }\n  /**\n   * @description Creates a human representation of the output\n   */\n\n\n  toHuman(isExtended) {\n    return {\n      events: this.events.map(event => event.toHuman(isExtended)),\n      status: this.status.toHuman(isExtended)\n    };\n  }\n\n}\n\nexports.default = SubmittableResult;","map":null,"metadata":{},"sourceType":"script"}