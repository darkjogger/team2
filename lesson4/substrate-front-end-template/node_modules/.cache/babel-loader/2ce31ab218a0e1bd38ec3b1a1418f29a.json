{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction decodeAccountId(value) {\n  if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _utilCrypto.decodeAddress)(value.toString());\n  }\n\n  return value;\n}\n/**\n * @name AccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value = new Uint8Array()) {\n    super(registry, decodeAccountId(value), 256);\n  }\n\n  static encode(value, ss58Format) {\n    return (0, _utilCrypto.encodeAddress)(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;","map":null,"metadata":{},"sourceType":"script"}