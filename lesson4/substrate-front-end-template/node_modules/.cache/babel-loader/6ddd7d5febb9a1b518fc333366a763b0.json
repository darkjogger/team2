{"ast":null,"code":"var _jsxFileName = \"/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/Events.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const {\n    api\n  } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = ['system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})', 'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'];\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const {\n          event,\n          phase\n        } = record;\n        const types = event.typeDef; // show what we are busy with\n\n        const eventName = `${event.section}:${event.method}:: (phase=${phase.toString()})`;\n        if (filter.includes(eventName)) return; // loop through each of the parameters, displaying the type and data\n\n        const params = event.data.map((data, index) => `${types[index].type}: ${data.toString()}`);\n        setEventFeed(e => [{\n          icon: 'bell',\n          summary: `${eventName}-${e.length}`,\n          extraText: event.meta.documentation.join(', ').toString(),\n          content: params.join(', ')\n        }, ...e]);\n      });\n    });\n  }, [api.query.system]);\n  return React.createElement(Grid.Column, {\n    width: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Events\"), React.createElement(Button, {\n    basic: true,\n    circular: true,\n    size: \"mini\",\n    color: \"grey\",\n    floated: \"right\",\n    icon: \"erase\",\n    onClick: _ => setEventFeed([]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Feed, {\n    style: {\n      clear: 'both',\n      overflow: 'auto',\n      maxHeight: 250\n    },\n    events: eventFeed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nexport default function Events(props) {\n  const {\n    api\n  } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? React.createElement(Main, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })) : null;\n}","map":{"version":3,"sources":["/Users/binggao/Documents/GitHub/team2/lesson3/substrate-front-end-template/src/Events.js"],"names":["React","useEffect","useState","Feed","Grid","Button","useSubstrate","Main","props","api","eventFeed","setEventFeed","filter","query","system","events","forEach","record","event","phase","types","typeDef","eventName","section","method","toString","includes","params","data","map","index","type","e","icon","summary","length","extraText","meta","documentation","join","content","float","_","clear","overflow","maxHeight","Events"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        const eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        if (filter.includes(eventName)) return;\n\n        // loop through each of the parameters, displaying the type and data\n        const params = event.data.map(\n          (data, index) => `${types[index].type}: ${data.toString()}`\n        );\n\n        setEventFeed(e => [\n          {\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          },\n          ...e\n        ]);\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? (\n    <Main {...props} />\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}