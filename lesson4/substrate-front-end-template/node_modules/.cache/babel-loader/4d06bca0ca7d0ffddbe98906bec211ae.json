{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction dataAsString(data) {\n  return data.isRaw ? (0, _util.u8aToString)(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();\n}\n\nfunction retrieveNick(api, accountId) {\n  var _api$query$nicks;\n\n  return (accountId && ((_api$query$nicks = api.query.nicks) === null || _api$query$nicks === void 0 ? void 0 : _api$query$nicks.nameOf) ? api.query.nicks.nameOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _operators.map)(nameOf => (nameOf === null || nameOf === void 0 ? void 0 : nameOf.isSome) ? (0, _util.u8aToString)(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));\n}\n\nfunction extractIdentity(identityOfOpt, superOf) {\n  if (!(identityOfOpt === null || identityOfOpt === void 0 ? void 0 : identityOfOpt.isSome)) {\n    return {\n      judgements: []\n    };\n  }\n\n  const {\n    info,\n    judgements\n  } = identityOfOpt.unwrap();\n  const topDisplay = dataAsString(info.display);\n  return {\n    display: superOf ? dataAsString(superOf[1]) || topDisplay : topDisplay,\n    displayParent: superOf ? topDisplay : undefined,\n    email: dataAsString(info.email),\n    image: dataAsString(info.image),\n    judgements,\n    legal: dataAsString(info.legal),\n    other: info.additional.reduce((other, [_key, _value]) => {\n      const key = dataAsString(_key);\n      const value = dataAsString(_value);\n\n      if (key && value) {\n        other[key] = value;\n      }\n\n      return other;\n    }, {}),\n    parent: superOf ? superOf[0] : undefined,\n    pgp: info.pgpFingerprint.isSome ? info.pgpFingerprint.unwrap().toHex() : undefined,\n    riot: dataAsString(info.riot),\n    twitter: dataAsString(info.twitter),\n    web: dataAsString(info.web)\n  };\n}\n\nfunction retrieveIdentity(api, accountId) {\n  var _api$query$identity;\n\n  return (accountId && ((_api$query$identity = api.query.identity) === null || _api$query$identity === void 0 ? void 0 : _api$query$identity.identityOf) ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : (0, _rxjs.of)([undefined, undefined])).pipe((0, _operators.switchMap)(([identityOfOpt, superOfOpt]) => {\n    if (identityOfOpt === null || identityOfOpt === void 0 ? void 0 : identityOfOpt.isSome) {\n      // this identity has something set\n      return (0, _rxjs.of)([identityOfOpt, undefined]);\n    } else if (superOfOpt === null || superOfOpt === void 0 ? void 0 : superOfOpt.isSome) {\n      const superOf = superOfOpt.unwrap(); // we have a super\n\n      return (0, _rxjs.combineLatest)([api.query.identity.identityOf(superOf[0]), (0, _rxjs.of)(superOf)]);\n    } // nothing of value returned\n\n\n    return (0, _rxjs.of)([undefined, undefined]);\n  }), (0, _operators.map)(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf)));\n}\n/**\n * @name info\n * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname\n */\n\n\nfunction info(api) {\n  return (0, _util2.memo)(address => api.derive.accounts.idAndIndex(address).pipe((0, _operators.switchMap)(([accountId, accountIndex]) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({\n    accountId,\n    accountIndex\n  }), retrieveIdentity(api, accountId), retrieveNick(api, accountId)])), (0, _operators.map)(([{\n    accountId,\n    accountIndex\n  }, identity, nickname]) => ({\n    accountId,\n    accountIndex,\n    identity,\n    nickname\n  }))));\n}","map":null,"metadata":{},"sourceType":"script"}