{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.indexes = indexes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _AccountIndex = require(\"@polkadot/types/generic/AccountIndex\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst enumsetSize = _AccountIndex.ENUMSET_SIZE.toNumber();\n\nfunction queryEnumSet(api) {\n  return api.query.indices.nextEnumSet().pipe( // use the nextEnumSet (which is a counter of the number of sets) to construct\n  // a range of values to query [0, 1, 2, ...]. Retrieve the full enum set for the\n  // specific index - each query can return up to ENUMSET_SIZE (64) records, each\n  // containing an AccountId\n  (0, _operators.switchMap)(next => api.query.indices.enumSet.multi([...Array(next.toNumber() + 1).keys()])), (0, _operators.map)(all => all.reduce((indexes, list, outerIndex) => {\n    (list || []).forEach((accountId, innerIndex) => {\n      // re-create the index based on position 0 is [0][0] and likewise\n      // 64 (0..63 in first) is [1][0] (the first index value in set 2)\n      const index = outerIndex * enumsetSize + innerIndex;\n      indexes[accountId.toString()] = api.registry.createType('AccountIndex', index);\n    });\n    return indexes;\n  }, {})));\n}\n\nfunction queryAccounts(api) {\n  return api.query.indices.accounts.entries().pipe((0, _operators.map)(entries => entries.reduce((indexes, [key, idOpt]) => {\n    if (idOpt.isSome) {\n      indexes[idOpt.unwrap()[0].toString()] = key.args[0];\n    }\n\n    return indexes;\n  }, {})));\n}\n/**\n * @name indexes\n * @returns Returns all the indexes on the system.\n * @description This is an unwieldly query since it loops through\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\n * on the number of active accounts in the system\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.indexes((indexes) => {\n *   console.log('All existing AccountIndexes', indexes);\n * });\n * ```\n */\n\n\nfunction indexes(api) {\n  return (0, _util2.memo)(() => (api.query.indices ? (0, _util.isFunction)(api.query.indices.accounts) ? queryAccounts(api) : queryEnumSet(api) : (0, _rxjs.of)({})).pipe((0, _operators.startWith)({})));\n}","map":null,"metadata":{},"sourceType":"script"}