{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _observable = _interopRequireDefault(require(\"../observable\")); // Copyright 2017-2020 @polkadot/ui-keyring authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nlet hasCalledInitOptions = false;\n\nconst sortByName = (a, b) => {\n  const valueA = a.option.name;\n  const valueB = b.option.name;\n  return valueA.localeCompare(valueB);\n};\n\nconst sortByCreated = (a, b) => {\n  const valueA = a.json.meta.whenCreated || 0;\n  const valueB = b.json.meta.whenCreated || 0;\n\n  if (valueA < valueB) {\n    return 1;\n  }\n\n  if (valueA > valueB) {\n    return -1;\n  }\n\n  return 0;\n};\n\nclass KeyringOption {\n  constructor() {\n    this.optionsSubject = new _rxjs.BehaviorSubject(this.emptyOptions());\n  }\n\n  createOptionHeader(name) {\n    return {\n      key: `header-${name.toLowerCase()}`,\n      name,\n      value: null\n    };\n  }\n\n  init(keyring) {\n    (0, _util.assert)(!hasCalledInitOptions, 'Unable to initialise options more than once');\n\n    _observable.default.subscribe(() => {\n      const opts = this.emptyOptions();\n      this.addAccounts(keyring, opts);\n      this.addAddresses(keyring, opts);\n      this.addContracts(keyring, opts);\n      opts.address = this.linkItems({\n        Addresses: opts.address,\n        Recent: opts.recent\n      });\n      opts.account = this.linkItems({\n        Accounts: opts.account,\n        Development: opts.testing\n      });\n      opts.contract = this.linkItems({\n        Contracts: opts.contract\n      });\n      opts.all = [].concat(opts.account, opts.address);\n      opts.allPlus = [].concat(opts.account, opts.address, opts.contract);\n      this.optionsSubject.next(opts);\n    });\n\n    hasCalledInitOptions = true;\n  }\n\n  linkItems(items) {\n    return Object.keys(items).reduce((result, header) => {\n      const options = items[header];\n      return result.concat(options.length ? [this.createOptionHeader(header)] : [], options);\n    }, []);\n  }\n\n  addAccounts(keyring, options) {\n    const available = keyring.accounts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      json: {\n        meta: {\n          isTesting = false\n        }\n      },\n      option\n    }) => {\n      if (!isTesting) {\n        options.account.push(option);\n      } else {\n        options.testing.push(option);\n      }\n    });\n  }\n\n  addAddresses(keyring, options) {\n    const available = keyring.addresses.subject.getValue();\n    Object.values(available).filter(({\n      json\n    }) => !!json.meta.isRecent).sort(sortByCreated).forEach(({\n      option\n    }) => {\n      options.recent.push(option);\n    });\n    Object.values(available).filter(({\n      json\n    }) => !json.meta.isRecent).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.address.push(option);\n    });\n  }\n\n  addContracts(keyring, options) {\n    const available = keyring.contracts.subject.getValue();\n    Object.values(available).sort(sortByName).forEach(({\n      option\n    }) => {\n      options.contract.push(option);\n    });\n  }\n\n  emptyOptions() {\n    return {\n      account: [],\n      address: [],\n      all: [],\n      allPlus: [],\n      contract: [],\n      recent: [],\n      testing: []\n    };\n  }\n\n}\n\nconst keyringOptionInstance = new KeyringOption();\nvar _default = keyringOptionInstance;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}