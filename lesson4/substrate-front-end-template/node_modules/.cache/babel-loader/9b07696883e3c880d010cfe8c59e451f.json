{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Base = _interopRequireDefault(require(\"./Base\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction decodeOptionU8a(registry, Type, value) {\n  return !value.length || value[0] === 0 ? new _Null.default(registry) : new Type(registry, value.subarray(1));\n}\n/** @internal */\n\n\nfunction decodeOption(registry, typeName, value) {\n  if ((0, _util.isNull)(value) || (0, _util.isUndefined)(value) || value instanceof _Null.default) {\n    return new _Null.default(registry);\n  }\n\n  const Type = (0, _utils.typeToConstructor)(registry, typeName); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n  if (value instanceof Option) {\n    return decodeOption(registry, Type, value.value);\n  } else if (value instanceof Type) {\n    // don't re-create, use as it (which also caters for derived types)\n    return value;\n  } else if ((0, _util.isU8a)(value)) {\n    // the isU8a check happens last in the if-tree - since the wrapped value\n    // may be an instance of it, so Type and Option checks go in first\n    return decodeOptionU8a(registry, Type, value);\n  }\n\n  return new Type(registry, value);\n}\n/**\n * @name Option\n * @description\n * An Option is an optional field. Basically the first byte indicates that there is\n * is value to follow. If the byte is `1` there is an actual value. So the Option\n * implements that - decodes, checks for optionality and wraps the required structure\n * with a value if/as required/found.\n */\n\n\nclass Option extends _Base.default {\n  constructor(registry, typeName, value) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    super(registry, decodeOption(registry, typeName, value));\n    Object.defineProperty(this, _Type, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _utils.typeToConstructor)(registry, typeName);\n  }\n\n  static with(Type) {\n    return class extends Option {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    // boolean byte (has value, doesn't have) along with wrapped length\n    return 1 + this._raw.encodedLength;\n  }\n  /**\n   * @description Checks if the Option has no value\n   */\n\n\n  get isEmpty() {\n    return this.isNone;\n  }\n  /**\n   * @description Checks if the Option has no value\n   */\n\n\n  get isNone() {\n    return this._raw instanceof _Null.default;\n  }\n  /**\n   * @description Checks if the Option has a value\n   */\n\n\n  get isSome() {\n    return !this.isNone;\n  }\n  /**\n   * @description The actual value for the Option\n   */\n\n\n  get value() {\n    return this._raw;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Option) {\n      return this.isSome === other.isSome && this.value.eq(other.value);\n    }\n\n    return this.value.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // This attempts to align with the JSON encoding - actually in this case\n    // the isSome value is correct, however the `isNone` may be problematic\n    return this.isNone ? '0x' : (0, _util.u8aToHex)(this.toU8a().subarray(1));\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType(isBare) {\n    const wrapped = new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType();\n    return isBare ? wrapped : `Option<${wrapped}>`;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    if (isBare) {\n      return this._raw.toU8a(true);\n    }\n\n    const u8a = new Uint8Array(this.encodedLength);\n\n    if (this.isSome) {\n      u8a.set([1]);\n      u8a.set(this._raw.toU8a(), 1);\n    }\n\n    return u8a;\n  }\n  /**\n   * @description Returns the value that the Option represents (if available), throws if null\n   */\n\n\n  unwrap() {\n    if (this.isNone) {\n      throw new Error('Option: unwrapping a None value');\n    }\n\n    return this._raw;\n  }\n  /**\n   * @description Returns the value that the Option represents (if available) or defaultValue if none\n   * @param defaultValue The value to return if the option isNone\n   */\n\n\n  unwrapOr(defaultValue) {\n    return this.isSome ? this.unwrap() : defaultValue;\n  }\n  /**\n   * @description Returns the value that the Option represents (if available) or defaultValue if none\n   * @param defaultValue The value to return if the option isNone\n   */\n\n\n  unwrapOrDefault() {\n    return this.isSome ? this.unwrap() : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry);\n  }\n\n}\n\nexports.default = Option;\n\nvar _Type = (0, _classPrivateFieldLooseKey2.default)(\"Type\");","map":null,"metadata":{},"sourceType":"script"}