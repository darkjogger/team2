{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasRewards = _erasRewards;\nexports.erasRewards = erasRewards;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nfunction _erasRewards(api) {\n  return (0, _util.memo)((eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = eras.filter(era => !cached.some(cached => era.eq(cached.era)));\n\n    if (!remaining.length) {\n      return (0, _rxjs.of)(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _operators.map)(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => _util.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasRewards(api) {\n  return (0, _util.memo)((withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasRewards(eras, withActive))));\n}","map":null,"metadata":{},"sourceType":"script"}