{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Verify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _blake = require(\"../blake2\");\n\nvar _elliptic = _interopRequireDefault(require(\"elliptic\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst EC = _elliptic.default.ec;\nconst ec = new EC('secp256k1');\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Verify(message, signature, address) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  const sig = {\n    r: signatureU8a.slice(0, 32),\n    s: signatureU8a.slice(32, 64)\n  };\n  const recovery = signatureU8a[64];\n  const publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  ec.recoverPubKey((0, _blake.blake2AsU8a)(message, 256), sig, recovery).encodeCompressed(null));\n  return Buffer.compare((0, _blake.blake2AsU8a)(publicKey, 256), (0, _util.u8aToU8a)(address)) === 0;\n}","map":null,"metadata":{},"sourceType":"script"}