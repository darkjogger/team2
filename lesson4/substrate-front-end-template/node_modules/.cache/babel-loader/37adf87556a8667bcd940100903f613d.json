{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.idAndIndex = idAndIndex;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());\n\n    if (decoded.length === 32) {\n      const accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe((0, _operators.map)(accountIndex => [accountId, accountIndex]));\n    }\n\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex).pipe((0, _operators.map)(accountId => [accountId, accountIndex]));\n  } catch (error) {\n    return (0, _rxjs.of)([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nfunction idAndIndex(api) {\n  return (0, _util2.memo)(address => retrieve(api, address));\n}","map":null,"metadata":{},"sourceType":"script"}