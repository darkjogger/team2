{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toV4;\n\nvar _codec = require(\"@polkadot/types/codec\"); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/** @internal */\n\n\nfunction toV4StorageFunction(registry, storageFn) {\n  const {\n    documentation,\n    fallback,\n    modifier,\n    name,\n    type\n  } = storageFn; // Convert the old type to the new type: there is one new field\n  // called `hasher`, which we initialize to xxHash (the default in\n  // v3).\n\n  const [newType, index] = type.isPlain ? [type.asPlain, 0] : type.isMap ? [registry.createType('MapTypeV4', {\n    hasher: registry.createType('StorageHasherV4', 'Twox128'),\n    key: type.asMap.key,\n    linked: type.asMap.linked,\n    value: type.asMap.value\n  }), 1] : [registry.createType('DoubleMapTypeV4', {\n    hasher: registry.createType('StorageHasherV4', 'Twox128'),\n    key1: type.asDoubleMap.key1,\n    key2: type.asDoubleMap.key2,\n    key2Hasher: type.asDoubleMap.key2Hasher,\n    value: type.asDoubleMap.value\n  }), 2];\n  return registry.createType('StorageFunctionMetadataV4', {\n    documentation,\n    fallback,\n    modifier,\n    name,\n    type: registry.createType('StorageFunctionTypeV4', newType, index)\n  });\n}\n/** @internal */\n\n\nfunction toV4(registry, {\n  modules\n}) {\n  return registry.createType('MetadataV4', {\n    modules: modules.map(({\n      calls,\n      events,\n      name,\n      prefix,\n      storage\n    }) => registry.createType('ModuleMetadataV4', {\n      calls,\n      events,\n      name,\n      prefix,\n      storage: storage.isSome ? new _codec.Option(registry, 'Vec<StorageFunctionMetadataV4>', storage.unwrap().map(v => toV4StorageFunction(registry, v))) : undefined\n    }))\n  });\n}","map":null,"metadata":{},"sourceType":"script"}