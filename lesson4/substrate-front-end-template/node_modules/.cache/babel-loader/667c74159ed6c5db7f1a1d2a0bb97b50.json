{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinkageResult = exports.default = void 0;\n\nvar _Option = _interopRequireDefault(require(\"./Option\"));\n\nvar _Struct = _interopRequireDefault(require(\"./Struct\"));\n\nvar _Tuple = _interopRequireDefault(require(\"./Tuple\"));\n\nvar _Vec = _interopRequireDefault(require(\"./Vec\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nclass Linkage extends _Struct.default {\n  constructor(registry, Type, value) {\n    super(registry, {\n      previous: _Option.default.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: _Option.default.with(Type)\n    }, value);\n    console.error([...this.entries()]);\n  }\n\n  static withKey(Type) {\n    return class extends Linkage {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n\n  get previous() {\n    return this.get('previous');\n  }\n\n  get next() {\n    return this.get('next');\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Linkage<${this.next.toRawType(true)}>`;\n  }\n  /**\n   * @description Custom toU8a which with bare mode does not return the linkage if empty\n   */\n\n\n  toU8a() {\n    // As part of a storage query (where these appear), in the case of empty, the values\n    // are NOT populated by the node - follow the same logic, leaving it empty\n    return this.isEmpty ? EMPTY : super.toU8a();\n  }\n\n}\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\n\nexports.default = Linkage;\n\nclass LinkageResult extends _Tuple.default {\n  constructor(registry, [TypeKey, keys], [TypeValue, values]) {\n    super(registry, {\n      Keys: _Vec.default.with(TypeKey),\n      Values: _Vec.default.with(TypeValue)\n    }, [keys, values]);\n  }\n\n}\n\nexports.LinkageResult = LinkageResult;","map":null,"metadata":{},"sourceType":"script"}