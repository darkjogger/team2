{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\n\nvar _default = {\n  rpc: {\n    name: {\n      description: 'Retrieves the node name',\n      params: [],\n      type: 'Text'\n    },\n    version: {\n      description: 'Retrieves the version of the node',\n      params: [],\n      type: 'Text'\n    },\n    chain: {\n      description: 'Retrieves the chain',\n      params: [],\n      type: 'Text'\n    },\n    chainType: {\n      description: 'Retrieves the chain type',\n      params: [],\n      type: 'ChainType'\n    },\n    properties: {\n      description: 'Get a custom set of properties as a JSON object, defined in the chain spec',\n      params: [],\n      type: 'ChainProperties'\n    },\n    health: {\n      description: 'Return health status of the node',\n      params: [],\n      type: 'Health'\n    },\n    localPeerId: {\n      description: 'Returns the base58-encoded PeerId of the node',\n      params: [],\n      type: 'Text'\n    },\n    localListenAddresses: {\n      description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',\n      params: [],\n      type: 'Vec<Text>'\n    },\n    peers: {\n      description: 'Returns the currently connected peers',\n      params: [],\n      type: 'Vec<PeerInfo>'\n    },\n    networkState: {\n      description: 'Returns current state of the network',\n      params: [],\n      type: 'NetworkState'\n    },\n    addReservedPeer: {\n      description: 'Adds a reserved peer',\n      params: [{\n        name: 'peer',\n        type: 'Text'\n      }],\n      type: 'Text'\n    },\n    removeReservedPeer: {\n      description: 'Remove a reserved peer',\n      params: [{\n        name: 'peerId',\n        type: 'Text'\n      }],\n      type: 'Text'\n    },\n    nodeRoles: {\n      description: 'Returns the roles the node is running as',\n      params: [],\n      type: 'Vec<NodeRole>'\n    }\n  },\n  types: {\n    AccountInfo: {\n      nonce: 'Index',\n      refcount: 'RefCount',\n      data: 'AccountData'\n    },\n    ChainProperties: {\n      ss58Format: 'Option<u8>',\n      tokenDecimals: 'Option<u32>',\n      tokenSymbol: 'Option<Text>'\n    },\n    ChainType: {\n      _enum: {\n        Development: 'Null',\n        Local: 'Null',\n        Live: 'Null',\n        Custom: 'Text'\n      }\n    },\n    DigestOf: 'Digest',\n    DispatchError: {\n      _enum: {\n        Other: 'Null',\n        CannotLookup: 'Null',\n        BadOrigin: 'Null',\n        Module: 'DispatchErrorModule'\n      }\n    },\n    DispatchErrorModule: {\n      index: 'u8',\n      error: 'u8'\n    },\n    DispatchErrorTo198: {\n      module: 'Option<u8>',\n      error: 'u8'\n    },\n    DispatchResult: 'Result<(), DispatchError>',\n    DispatchResultOf: 'DispatchResult',\n    DispatchResultTo198: 'Result<(), Text>',\n    Event: 'GenericEvent',\n    EventId: '[u8; 2]',\n    EventIndex: 'u32',\n    EventRecord: {\n      phase: 'Phase',\n      event: 'Event',\n      topics: 'Vec<Hash>'\n    },\n    EventRecordTo76: {\n      phase: 'Phase',\n      event: 'Event'\n    },\n    Health: {\n      peers: 'u64',\n      isSyncing: 'bool',\n      shouldHavePeers: 'bool'\n    },\n    Key: 'Bytes',\n    LastRuntimeUpgradeInfo: {\n      specVersion: 'Compact<u32>',\n      specName: 'Text'\n    },\n    NetworkState: {\n      peerId: 'Text',\n      listenedAddresses: 'Vec<Text>',\n      externalAddresses: 'Vec<Text>',\n      connectedPeers: 'HashMap<Text, Peer>',\n      notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',\n      averageDownloadPerSec: 'u64',\n      averageUploadPerSec: 'u64',\n      peerset: 'NetworkStatePeerset'\n    },\n    NetworkStatePeerset: {\n      messageQueue: 'u64',\n      nodes: 'HashMap<Text, NetworkStatePeersetInfo>'\n    },\n    NetworkStatePeersetInfo: {\n      connected: 'bool',\n      reputation: 'u64'\n    },\n    NodeRole: {\n      _enum: {\n        Full: 'Null',\n        LightClient: 'Null',\n        Authority: 'Null',\n        UnknownRole: 'u8'\n      }\n    },\n    NotConnectedPeer: {\n      knownAddresses: 'Vec<Text>',\n      latestPingTime: 'Option<PeerPing>',\n      versionString: 'Option<Text>'\n    },\n    Peer: {\n      enabled: 'bool',\n      endpoint: 'PeerEndpoint',\n      knownAddresses: 'Vec<Text>',\n      latestPingTime: 'PeerPing',\n      open: 'bool',\n      versionString: 'Text'\n    },\n    PeerEndpoint: {\n      listening: 'PeerEndpointAddr'\n    },\n    PeerEndpointAddr: {\n      _alias: {\n        localAddr: 'local_addr',\n        sendBackAddr: 'send_back_addr'\n      },\n      localAddr: 'Text',\n      sendBackAddr: 'Text'\n    },\n    PeerPing: {\n      nanos: 'u64',\n      secs: 'u64'\n    },\n    PeerInfo: {\n      peerId: 'Text',\n      roles: 'Text',\n      protocolVersion: 'u32',\n      bestHash: 'Hash',\n      bestNumber: 'BlockNumber'\n    },\n    Phase: {\n      _enum: {\n        ApplyExtrinsic: 'u32',\n        Finalization: 'Null',\n        Initialization: 'Null'\n      }\n    },\n    RefCount: 'u8'\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}