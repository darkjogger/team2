{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._referendumVotes = _referendumVotes;\nexports._referendumsVotes = _referendumsVotes;\nexports._referendumInfo = _referendumInfo;\nexports.referendumsInfo = referendumsInfo;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nvar _util3 = require(\"./util\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction votesPrev(api, referendumId) {\n  return api.query.democracy.votersFor(referendumId).pipe((0, _operators.switchMap)(votersFor => (0, _rxjs.combineLatest)([(0, _rxjs.of)(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : (0, _rxjs.of)([]), api.derive.balances.votingBalances(votersFor)])), (0, _operators.map)(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({\n    accountId,\n    balance: balances[index].votingBalance || api.registry.createType('Balance'),\n    isDelegating: false,\n    vote: votes[index] || api.registry.createType('Vote')\n  }))));\n}\n\nfunction votesCurr(api, referendumId) {\n  return api.query.democracy.votingOf.entries().pipe((0, _operators.map)(allVoting => {\n    const mapped = allVoting.map(([key, voting]) => [key.args[0], voting]);\n    const votes = mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes\n    votes.reduce((result, [, vote]) => {\n      if (vote.isStandard) {\n        result.push(_objectSpread({\n          accountId,\n          isDelegating: false\n        }, vote.asStandard));\n      }\n\n      return result;\n    }, result), []);\n    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations\n\n    delegations.forEach(([accountId, {\n      balance,\n      conviction,\n      target\n    }]) => {\n      // Are we delegating to a delegator\n      const toDelegator = delegations.find(([accountId]) => accountId.eq(target));\n      const to = votes.find(({\n        accountId\n      }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target\n\n      if (to) {\n        votes.push({\n          accountId,\n          balance,\n          isDelegating: true,\n          vote: api.registry.createType('Vote', {\n            aye: to.vote.isAye,\n            conviction\n          })\n        });\n      }\n    });\n    return votes;\n  }));\n}\n\nfunction _referendumVotes(api) {\n  return (0, _util2.memo)(referendum => (0, _rxjs.combineLatest)([api.derive.democracy.sqrtElectorate(), (0, _util.isFunction)(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe((0, _operators.map)(([sqrtElectorate, votes]) => (0, _util3.calcVotes)(sqrtElectorate, referendum, votes))));\n}\n\nfunction _referendumsVotes(api) {\n  return (0, _util2.memo)(referendums => referendums.length ? (0, _rxjs.combineLatest)(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : (0, _rxjs.of)([]));\n}\n\nfunction _referendumInfo(api) {\n  return (0, _util2.memo)((index, info) => {\n    const status = (0, _util3.getStatus)(info);\n    return status ? api.query.democracy.preimages(status.proposalHash).pipe((0, _operators.map)(preimage => ({\n      image: (0, _util3.parseImage)(api, preimage),\n      imageHash: status.proposalHash,\n      index: api.registry.createType('ReferendumIndex', index),\n      status\n    }))) : (0, _rxjs.of)(null);\n  });\n}\n\nfunction referendumsInfo(api) {\n  return (0, _util2.memo)(ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0, _operators.switchMap)(infos => (0, _rxjs.combineLatest)(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), (0, _operators.map)(infos => infos.filter(referendum => !!referendum))) : (0, _rxjs.of)([]));\n}","map":null,"metadata":{},"sourceType":"script"}