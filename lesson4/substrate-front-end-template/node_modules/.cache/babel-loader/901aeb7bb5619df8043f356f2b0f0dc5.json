{"ast":null,"code":"var _jsxFileName = \"/Users/binggao/Documents/GitHub/team2/lesson4/substrate-front-end-template/src/substrate-lib/components/TxButton.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  const {\n    api\n  } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const {\n    palletRpc,\n    callable,\n    inputParams,\n    paramFields\n  } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n\n  const isSudo = () => type === 'SUDO-TX';\n\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n\n  const isSigned = () => type === 'SIGNED-TX';\n\n  const isRpc = () => type === 'RPC';\n\n  const isConstant = () => type === 'CONSTANT';\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: {\n        source,\n        isInjected\n      }\n    } = accountPair;\n    let fromAcct; // signer is from Polkadot-js browser extension\n\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({\n    status\n  }) => status.isFinalized ? setStatus(`ðŸ˜‰ Finalized. Block hash: ${status.asFinalized.toString()}`) : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err => setStatus(`ðŸ˜ž Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = inputParams.map(transformParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed)) : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n    txExecute.signAndSend(fromAcct, txResHandler).catch(txErrHandler);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = inputParams.map(transformParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx[palletRpc][callable](...transformed) : api.tx[palletRpc][callable]();\n    txExecute.signAndSend(fromAcct, txResHandler).catch(txErrHandler);\n  };\n\n  const unsignedTx = () => {\n    const transformed = inputParams.map(transformParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx[palletRpc][callable](...transformed) : api.tx[palletRpc][callable]();\n    txExecute.send(txResHandler).catch(txErrHandler);\n  };\n\n  const query = async () => {\n    const transformed = inputParams.map(transformParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, result => {\n      result.isNone ? setStatus('None') : setStatus(result.toString());\n    });\n    setUnsub(unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = inputParams.map(transformParams);\n\n    try {\n      const result = await api.rpc[palletRpc][callable](...transformed);\n      result.isNone ? setStatus('None') : setStatus(result.toString());\n    } catch (err) {\n      setStatus(err.toString());\n    }\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n    isSudo() && sudoTx();\n    isSigned() && signedTx();\n    isUnsigned() && unsignedTx();\n    isQuery() && query();\n    isRpc() && rpc();\n    isConstant() && constant();\n  };\n\n  const transformParams = param => {\n    if (typeof param !== 'object') {\n      // param is a primitive value. Return\n      return param;\n    }\n\n    const {\n      type,\n      value\n    } = param;\n    let res = value;\n\n    if (utils.paramConversion.num.indexOf(type) >= 0) {\n      res = type.indexOf('.') >= 0 ? Number.parseFloat(value) : Number.parseInt(value);\n    }\n\n    return res;\n  };\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) {\n      return true;\n    }\n\n    return paramFields.every((el, ind) => {\n      const param = inputParams[ind];\n\n      if (param == null) {\n        return false;\n      }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value != null && value !== '';\n    });\n  };\n\n  return React.createElement(Button, {\n    basic: true,\n    color: color,\n    style: style,\n    type: \"submit\",\n    onClick: transaction,\n    disabled: disabled || !palletRpc || !callable || !allParamsFilled(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, label);\n} // prop typechecking\n\n\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton(props) {\n  return React.createElement(Button.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(TxButton, Object.assign({\n    label: \"Unsigned\",\n    type: \"UNSIGNED-TX\",\n    color: \"grey\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), React.createElement(Button.Or, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(TxButton, Object.assign({\n    label: \"Signed\",\n    type: \"SIGNED-TX\",\n    color: \"blue\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  })), React.createElement(Button.Or, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }), React.createElement(TxButton, Object.assign({\n    label: \"SUDO\",\n    type: \"SUDO-TX\",\n    color: \"red\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  })));\n}\n\nexport { TxButton, TxGroupButton };","map":{"version":3,"sources":["/Users/binggao/Documents/GitHub/team2/lesson4/substrate-front-end-template/src/substrate-lib/components/TxButton.js"],"names":["React","useState","PropTypes","Button","web3FromSource","useSubstrate","utils","TxButton","accountPair","label","setStatus","color","style","type","attrs","disabled","api","unsub","setUnsub","palletRpc","callable","inputParams","paramFields","isQuery","isSudo","isUnsigned","isSigned","isRpc","isConstant","getFromAcct","address","meta","source","isInjected","fromAcct","injected","setSigner","signer","txResHandler","status","isFinalized","asFinalized","toString","txErrHandler","err","sudoTx","transformed","map","transformParams","txExecute","tx","sudo","signAndSend","catch","signedTx","unsignedTx","send","query","result","isNone","rpc","constant","consts","transaction","param","value","res","paramConversion","num","indexOf","Number","parseFloat","parseInt","allParamsFilled","length","every","el","ind","propTypes","object","func","isRequired","oneOf","shape","string","array","TxGroupButton","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`ðŸ˜‰ Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`ðŸ˜ž Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = inputParams.map(transformParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = inputParams.map(transformParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n  };\n\n  const unsignedTx = () => {\n    const transformed = inputParams.map(transformParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    txExecute.send(txResHandler)\n      .catch(txErrHandler);\n  };\n\n  const query = async () => {\n    const transformed = inputParams.map(transformParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, result => {\n      result.isNone ? setStatus('None') : setStatus(result.toString());\n    });\n    setUnsub(unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = inputParams.map(transformParams);\n    try {\n      const result = await api.rpc[palletRpc][callable](...transformed);\n      result.isNone ? setStatus('None') : setStatus(result.toString());\n    } catch (err) {\n      setStatus(err.toString());\n    }\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    isSudo() && sudoTx();\n    isSigned() && signedTx();\n    isUnsigned() && unsignedTx();\n    isQuery() && query();\n    isRpc() && rpc();\n    isConstant() && constant();\n  };\n\n  const transformParams = (param) => {\n    if (typeof param !== 'object') {\n      // param is a primitive value. Return\n      return param;\n    }\n\n    const { type, value } = param;\n    let res = value;\n    if (utils.paramConversion.num.indexOf(type) >= 0) {\n      res = type.indexOf('.') >= 0 ? Number.parseFloat(value) : Number.parseInt(value);\n    }\n    return res;\n  };\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((el, ind) => {\n      const param = inputParams[ind];\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value != null && value !== '';\n    });\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={disabled || !palletRpc || !callable || !allParamsFilled() }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop typechecking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n"]},"metadata":{},"sourceType":"module"}