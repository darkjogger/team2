{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _Struct = _interopRequireDefault(require(\"@polkadot/types/codec/Struct\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _MagicNumber = _interopRequireDefault(require(\"./MagicNumber\"));\n\nvar _toV = _interopRequireDefault(require(\"./v0/toV1\"));\n\nvar _toV2 = _interopRequireDefault(require(\"./v1/toV2\"));\n\nvar _toV3 = _interopRequireDefault(require(\"./v2/toV3\"));\n\nvar _toV4 = _interopRequireDefault(require(\"./v3/toV4\"));\n\nvar _toV5 = _interopRequireDefault(require(\"./v4/toV5\"));\n\nvar _toV6 = _interopRequireDefault(require(\"./v5/toV6\"));\n\nvar _toV7 = _interopRequireDefault(require(\"./v6/toV7\"));\n\nvar _toV8 = _interopRequireDefault(require(\"./v7/toV8\"));\n\nvar _toV9 = _interopRequireDefault(require(\"./v8/toV9\"));\n\nvar _toV10 = _interopRequireDefault(require(\"./v9/toV10\"));\n\nvar _toV11 = _interopRequireDefault(require(\"./v10/toV11\"));\n\nvar _toLatest = _interopRequireDefault(require(\"./v11/toLatest\"));\n\nvar _util2 = require(\"./util\"); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nclass MetadataVersioned extends _Struct.default {\n  constructor(registry, value) {\n    super(registry, {\n      magicNumber: _MagicNumber.default,\n      metadata: 'MetadataAll'\n    }, value);\n    Object.defineProperty(this, _converted, {\n      writable: true,\n      value: new Map()\n    });\n    registry.setMetadata(this);\n  }\n\n  _assertVersion(version) {\n    (0, _util.assert)(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);\n    return this.version === version;\n  }\n\n  _getVersion(version, fromPrev) {\n    const asCurr = `asV${version}`;\n    const asPrev = `asV${version - 1}`;\n\n    if (this._assertVersion(version)) {\n      return this._metadata[asCurr];\n    }\n\n    if (!(0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].has(version)) {\n      (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev]));\n    }\n\n    return (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].get(version);\n  }\n  /**\n   * @description Returns the wrapped metadata as a limited calls-only (latest) version\n   */\n\n\n  get asCallsOnly() {\n    return new MetadataVersioned(this.registry, {\n      magicNumber: this.magicNumber,\n      metadata: this.registry.createType('MetadataAll', (0, _util2.toCallsOnly)(this.registry, this.asLatest), this.version)\n    });\n  }\n  /**\n   * @description Returns the wrapped metadata as a V0 object\n   */\n\n\n  get asV0() {\n    this._assertVersion(0);\n\n    return this._metadata.asV0;\n  }\n  /**\n   * @description Returns the wrapped values as a V1 object\n   */\n\n\n  get asV1() {\n    return this._getVersion(1, _toV.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V2 object\n   */\n\n\n  get asV2() {\n    return this._getVersion(2, _toV2.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V3 object\n   */\n\n\n  get asV3() {\n    return this._getVersion(3, _toV3.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V4 object\n   */\n\n\n  get asV4() {\n    return this._getVersion(4, _toV4.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V5 object\n   */\n\n\n  get asV5() {\n    return this._getVersion(5, _toV5.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V6 object\n   */\n\n\n  get asV6() {\n    return this._getVersion(6, _toV6.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V7 object\n   */\n\n\n  get asV7() {\n    return this._getVersion(7, _toV7.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V8 object\n   */\n\n\n  get asV8() {\n    return this._getVersion(8, _toV8.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V9 object\n   */\n\n\n  get asV9() {\n    return this._getVersion(9, _toV9.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n\n\n  get asV10() {\n    return this._getVersion(10, _toV10.default);\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n\n\n  get asV11() {\n    return this._getVersion(11, _toV11.default);\n  }\n  /**\n   * @description Returns the wrapped values as a latest version object\n   */\n\n\n  get asLatest() {\n    // This is non-existent & latest - applied here to do the module-specific type conversions\n    return this._getVersion(12, _toLatest.default);\n  }\n  /**\n   * @description\n   */\n\n\n  get magicNumber() {\n    return this.get('magicNumber');\n  }\n  /**\n   * @description the metadata wrapped\n   */\n\n\n  get _metadata() {\n    return this.get('metadata');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n\n\n  get version() {\n    return this._metadata.index;\n  }\n\n  getUniqTypes(throwError) {\n    return (0, _util2.getUniqTypes)(this.registry, this.asLatest, throwError);\n  }\n\n}\n\nexports.default = MetadataVersioned;\n\nvar _converted = (0, _classPrivateFieldLooseKey2.default)(\"converted\");","map":null,"metadata":{},"sourceType":"script"}