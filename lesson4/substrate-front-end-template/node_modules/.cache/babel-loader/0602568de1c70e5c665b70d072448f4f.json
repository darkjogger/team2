{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.account = account;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nfunction calcBalances(api, [accountId, [freeBalance, reservedBalance, frozenFee, frozenMisc, accountNonce]]) {\n  return {\n    accountId,\n    accountNonce,\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    reservedBalance,\n    votingBalance: api.registry.createType('Balance', freeBalance.add(reservedBalance))\n  };\n} // old\n\n\nfunction queryBalancesFree(api, accountId) {\n  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe((0, _operators.map)(([freeBalance, reservedBalance, accountNonce]) => [freeBalance, reservedBalance, api.registry.createType('Balance'), api.registry.createType('Balance'), accountNonce]));\n}\n\nfunction queryBalancesAccount(api, accountId) {\n  return api.queryMulti([[api.query.balances.account, accountId], [api.query.system.accountNonce, accountId]]).pipe((0, _operators.map)(([{\n    feeFrozen,\n    free,\n    miscFrozen,\n    reserved\n  }, accountNonce]) => [free, reserved, feeFrozen, miscFrozen, accountNonce]));\n}\n\nfunction queryCurrent(api, accountId) {\n  // AccountInfo is current, support old, eg. Edgeware\n  return api.query.system.account(accountId).pipe((0, _operators.map)(infoOrTuple => {\n    const {\n      feeFrozen,\n      free,\n      miscFrozen,\n      reserved\n    } = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];\n    const accountNonce = infoOrTuple.nonce || infoOrTuple[0];\n    return [free, reserved, feeFrozen, miscFrozen, accountNonce];\n  }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction account(api) {\n  return (0, _util2.memo)(address => api.derive.accounts.info(address).pipe((0, _operators.switchMap)(({\n    accountId\n  }) => accountId ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountId), (0, _util.isFunction)(api.query.system.account) ? queryCurrent(api, accountId) : (0, _util.isFunction)(api.query.balances.account) ? queryBalancesAccount(api, accountId) : queryBalancesFree(api, accountId)]) : (0, _rxjs.of)([api.registry.createType('AccountId'), [api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Index')]])), (0, _operators.map)(result => calcBalances(api, result))));\n}","map":null,"metadata":{},"sourceType":"script"}