{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryWithQueued = queryWithQueued;\nexports.query = query;\nexports.queryMulti = queryMulti;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction unwrapSessionIds(stashId, queuedKeys, nextKeys) {\n  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];\n  const nextSessionIds = nextKeys.unwrapOr([]);\n  return {\n    nextSessionIds,\n    sessionIds\n  };\n}\n\nfunction retrievePrev(api, stashId) {\n  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]], [api.query.staking.stakers, stashId]]);\n}\n\nfunction retrieveCurr(api, stashId) {\n  return api.derive.session.indexes().pipe((0, _operators.switchMap)(({\n    activeEra\n  }) => {\n    var _api$consts$session;\n\n    return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], ((_api$consts$session = api.consts.session) === null || _api$consts$session === void 0 ? void 0 : _api$consts$session.dedupKeyPrefix) ? [api.query.session.nextKeys, [api.consts.session.dedupKeyPrefix, stashId]] : [api.query.session.nextKeys, stashId], [api.query.staking.erasStakers, [activeEra, stashId]]]);\n  }));\n}\n\nfunction retrieveController(api, stashId, queuedKeys, [controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, nextKeys, exposure]) {\n  const controllerId = controllerIdOpt.unwrapOr(null);\n  const nominators = nominatorsOpt.unwrapOr(null);\n  return controllerId ? api.query.staking.ledger(controllerId).pipe((0, _operators.map)(stakingLedgerOpt => _objectSpread({\n    accountId: stashId,\n    controllerId,\n    exposure,\n    nominators: nominators ? Array.isArray(nominators) ? nominators[0].targets : nominators.targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOr(undefined),\n    stashId,\n    validatorPrefs: Array.isArray(validatorPrefs) ? validatorPrefs[0] : validatorPrefs\n  }, unwrapSessionIds(stashId, queuedKeys, nextKeys)))) : (0, _rxjs.of)({\n    accountId: stashId,\n    nextSessionIds: [],\n    sessionIds: []\n  });\n}\n\nfunction queryWithQueued(api) {\n  return (0, _util2.memo)((accountId, queuedKeys) => {\n    const stashId = api.registry.createType('AccountId', accountId);\n    return ((0, _util.isFunction)(api.query.staking.erasStakers) ? retrieveCurr(api, stashId) : retrievePrev(api, stashId)).pipe((0, _operators.switchMap)(result => retrieveController(api, stashId, queuedKeys, result)));\n  });\n}\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\n\n\nfunction query(api) {\n  return (0, _util2.memo)(accountId => api.query.session.queuedKeys().pipe((0, _operators.switchMap)(queuedKeys => api.derive.staking.queryWithQueued(accountId, queuedKeys))));\n}\n\nfunction queryMulti(api) {\n  return (0, _util2.memo)(accountIds => accountIds.length ? api.query.session.queuedKeys().pipe((0, _operators.switchMap)(queuedKeys => (0, _rxjs.combineLatest)(accountIds.map(acc => api.derive.staking.queryWithQueued(acc, queuedKeys))))) : (0, _rxjs.of)([]));\n}","map":null,"metadata":{},"sourceType":"script"}