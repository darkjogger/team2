{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._eraSlashes = _eraSlashes;\nexports.eraSlashes = eraSlashes;\nexports._erasSlashes = _erasSlashes;\nexports.erasSlashes = erasSlashes;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst CACHE_KEY = 'eraSlashes';\n\nfunction mapSlashes(era, noms, vals) {\n  const nominators = {};\n  const validators = {};\n  noms.forEach(([key, optBalance]) => {\n    nominators[key.args[1].toString()] = optBalance.unwrap();\n  });\n  vals.forEach(([key, optRes]) => {\n    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];\n  });\n  return {\n    era,\n    nominators,\n    validators\n  };\n}\n\nfunction _eraSlashes(api) {\n  return (0, _util.memo)((era, withActive) => {\n    const cacheKey = `${CACHE_KEY}-${era.toString()}`;\n    const cached = withActive ? undefined : _util.deriveCache.get(cacheKey);\n    return cached ? (0, _rxjs.of)(cached) : (0, _rxjs.combineLatest)([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe((0, _operators.map)(([noms, vals]) => {\n      const value = mapSlashes(era, noms, vals);\n      !withActive && _util.deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\n\nfunction eraSlashes(api) {\n  return (0, _util.memo)(era => api.derive.staking._eraSlashes(era, true));\n}\n\nfunction _erasSlashes(api) {\n  return (0, _util.memo)((eras, withActive) => eras.length ? (0, _rxjs.combineLatest)(eras.map(era => api.derive.staking._eraSlashes(era, withActive))) : (0, _rxjs.of)([]));\n}\n\nfunction erasSlashes(api) {\n  return (0, _util.memo)((withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasSlashes(eras, withActive))));\n}","map":null,"metadata":{},"sourceType":"script"}