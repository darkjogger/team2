{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setDeriveCache = setDeriveCache;\nexports.deriveCache = void 0;\n\nvar _cacheImpl = require(\"./cacheImpl\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);\nlet deriveCache;\nexports.deriveCache = deriveCache;\n\nfunction wrapCache(keyStart, cache) {\n  return {\n    del: partial => cache.del(`${keyStart}${partial}`),\n    forEach: cache.forEach,\n    get: partial => {\n      const key = `${keyStart}${partial}`;\n      const cached = cache.get(key);\n\n      if (cached) {\n        cached.x = Date.now();\n        cache.set(key, cached);\n        return cached.v;\n      }\n\n      return undefined;\n    },\n    set: (partial, v) => {\n      cache.set(`${keyStart}${partial}`, {\n        v,\n        x: Date.now()\n      });\n    }\n  };\n}\n\nfunction clearCache(cache) {\n  // clear all expired values\n  const now = Date.now();\n  const all = [];\n  cache.forEach((key, {\n    x\n  }) => {\n    now - x > CHACHE_EXPIRY && all.push(key);\n  }); // don't do delete inside loop, just in-case\n\n  all.forEach(key => cache.del(key));\n}\n\nfunction setDeriveCache(prefix = '', cache) {\n  exports.deriveCache = deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : _cacheImpl.deriveNoopCache;\n\n  if (cache) {\n    clearCache(cache);\n  }\n}\n\nsetDeriveCache();","map":null,"metadata":{},"sourceType":"script"}