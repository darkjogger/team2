{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Struct = _interopRequireDefault(require(\"../codec/Struct\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n// We explicitly cast the type here to get the actual TypeScript exports right\n// We can ignore the properties, added via Struct.with\n\n\nconst _Payload = _Struct.default.with({\n  address: 'Address',\n  blockHash: 'Hash',\n  blockNumber: 'BlockNumber',\n  era: 'ExtrinsicEra',\n  genesisHash: 'Hash',\n  method: 'Call',\n  nonce: 'Compact<Index>',\n  runtimeVersion: 'RuntimeVersion',\n  signedExtensions: 'Vec<Text>',\n  tip: 'Compact<Balance>',\n  version: 'u8'\n});\n/**\n * @name SignerPayload\n * @description\n * A generic signer payload that can be used for serialization between API and signer\n */\n\n\nclass SignerPayload extends _Payload {\n  /**\n   * @description Creates an representation of the structure as an ISignerPayload JSON\n   */\n  toPayload() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      era,\n      genesisHash,\n      method,\n      nonce,\n      runtimeVersion: {\n        specVersion,\n        transactionVersion\n      },\n      signedExtensions,\n      tip,\n      version\n    } = this;\n    return {\n      address: address.toString(),\n      blockHash: blockHash.toHex(),\n      blockNumber: blockNumber.toHex(),\n      era: era.toHex(),\n      genesisHash: genesisHash.toHex(),\n      method: method.toHex(),\n      nonce: nonce.toHex(),\n      signedExtensions: signedExtensions.map(e => e.toString()),\n      specVersion: specVersion.toHex(),\n      tip: tip.toHex(),\n      transactionVersion: transactionVersion.toHex(),\n      version: version.toNumber()\n    };\n  }\n  /**\n   * @description Creates a representation of the payload in raw Exrinsic form\n   */\n\n\n  toRaw() {\n    const payload = this.toPayload(); // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)\n\n    const data = (0, _util.u8aToHex)(this.registry.createType('ExtrinsicPayload', payload, {\n      version: payload.version\n    }).toU8a({\n      method: true\n    }));\n    return {\n      address: payload.address,\n      data,\n      type: 'payload'\n    };\n  }\n\n}\n\nexports.default = SignerPayload;","map":null,"metadata":{},"sourceType":"script"}