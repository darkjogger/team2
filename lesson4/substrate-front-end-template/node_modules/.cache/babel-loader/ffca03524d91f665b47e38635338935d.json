{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMetadataTypes = getMetadataTypes;\nexports.getModuleTypes = getModuleTypes;\nexports.getSpecTypes = getSpecTypes;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _chain = _interopRequireDefault(require(\"./chain\"));\n\nvar _metadata = _interopRequireDefault(require(\"./metadata\"));\n\nvar _modules = _interopRequireDefault(require(\"./modules\"));\n\nvar _spec = _interopRequireDefault(require(\"./spec\"));\n\nvar _warnings = _interopRequireDefault(require(\"./warnings\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // flatten a VersionedType[] into a Record<string, string>\n\n/** @internal */\n\n\nfunction filterVersions(versions = [], specVersion) {\n  return versions.filter(({\n    minmax: [min, max]\n  }) => ((0, _util.isUndefined)(min) || specVersion >= min) && ((0, _util.isUndefined)(max) || specVersion <= max)).reduce((result, {\n    types\n  }) => _objectSpread(_objectSpread({}, result), types), {});\n}\n/**\n * @description Based on the metadata version, return the registry types\n */\n\n\nfunction getMetadataTypes(_registry, specVersion) {\n  return filterVersions(_metadata.default, specVersion);\n}\n/**\n * @description Get types for specific modules (metadata override)\n */\n\n\nfunction getModuleTypes({\n  knownTypes\n}, section) {\n  var _knownTypes$typesAlia;\n\n  return _objectSpread(_objectSpread({}, _modules.default[section] || {}), ((_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]) || {});\n}\n/**\n * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)\n */\n\n\nfunction getSpecTypes({\n  knownTypes\n}, chainName, specName, specVersion) {\n  var _knownTypes$typesSpec, _knownTypes$typesChai;\n\n  const _chainName = chainName.toString();\n\n  const _specName = specName.toString();\n\n  const _specVersion = (0, _util.bnToBn)(specVersion).toNumber();\n\n  (_warnings.default[_specName] || []).forEach(warning => console.warn(`*** ${warning}`));\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, filterVersions(_spec.default[_specName], _specVersion)), filterVersions(_chain.default[_chainName], _specVersion)), ((_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[_specName]) || {}), ((_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[_chainName]) || {});\n}","map":null,"metadata":{},"sourceType":"script"}