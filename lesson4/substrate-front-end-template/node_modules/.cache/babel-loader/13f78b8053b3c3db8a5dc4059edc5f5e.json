{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasPoints = _erasPoints;\nexports.erasPoints = erasPoints;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst CACHE_KEY = 'eraPoints';\n\nfunction mapValidators({\n  individual\n}) {\n  return [...individual.entries()].filter(([, points]) => points.gtn(0)).reduce((result, [validatorId, points]) => {\n    result[validatorId.toString()] = points;\n    return result;\n  }, {});\n}\n\nfunction mapPoints(eras, points) {\n  return eras.map((era, index) => ({\n    era,\n    eraPoints: points[index].total,\n    validators: mapValidators(points[index])\n  }));\n}\n\nfunction _erasPoints(api) {\n  return (0, _util.memo)((eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = eras.filter(era => !cached.some(cached => era.eq(cached.era)));\n    return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _operators.map)(points => {\n      const query = mapPoints(remaining, points);\n      !withActive && query.forEach(q => _util.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasPoints(api) {\n  return (0, _util.memo)((withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasPoints(eras, withActive))));\n}","map":null,"metadata":{},"sourceType":"script"}