{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _MetadataVersioned = _interopRequireDefault(require(\"./MetadataVersioned\")); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// This software may be modified and distributed under the terms\n// of the Apache-2.0 license. See the LICENSE file for details.\n\n\nconst VERSION_IDX = 4; // magic u32 preceding\n// first we try and parse using the versioned structure, if this does fail,\n// we adjust with the magic number and a manual version and re-try. As soon as\n// we remove support for V0, we will just do a new here\n\nfunction decodeMetadata(registry, _value = new Uint8Array()) {\n  const value = (0, _util.isHex)(_value) ? (0, _util.hexToU8a)(_value) : _value;\n  const version = value[VERSION_IDX];\n\n  try {\n    return new _MetadataVersioned.default(registry, value);\n  } catch (error) {\n    // This is an f-ing hack as a follow-up to another ugly hack\n    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2\n    // when we fail on V9, try to re-parse it as v10... yes... HACK\n    if (version === 9) {\n      value[VERSION_IDX] = 10;\n      return decodeMetadata(registry, value);\n    }\n\n    throw error;\n  }\n}\n/**\n * @name Metadata\n * @description\n * The versioned runtime metadata as a decoded structure\n */\n\n\nclass Metadata extends _MetadataVersioned.default {\n  constructor(registry, value) {\n    super(registry, decodeMetadata(registry, value));\n  }\n\n}\n\nexports.default = Metadata;","map":null,"metadata":{},"sourceType":"script"}